{
  "hash": "12780c50911d0413127924d43224b586",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Cointegration between species\n---\n\n\nSteps:\n1. check for stationarity for all species by running a unit root test\n2. check for stationarity in difference between all species\n\n\n::: {#eb49fb02 .cell execution_count=1}\n``` {.python .cell-code}\n# import pandas as pd\n# import numpy as np\n# from statsmodels.tsa.vector_ar.vecm import coint_johansen\n# import statsmodels.tsa.stattools as ts\n# from statsmodels.tsa.stattools import adfuller\n```\n:::\n\n\n::: {#61e446b4 .cell execution_count=2}\n``` {.python .cell-code}\n# abundance_table = pd.read_excel('/Users/julietmalkowski/Desktop/Research/Kinetic_Model/abundance_table.xlsx')\n# #remove first 4 characters in every column name\n# abundance_table.columns = abundance_table.columns.str[4:] \n# #split string in column to get date and process\n# abundance_table[['Process','Date']] = abundance_table['le'].str.split('_',expand=True)\n# abundance_table = abundance_table.drop(columns=['le'])\n# #keep only AS-1 and AS-2 data\n# processes = ['AS-1', 'AS-2']\n# as_abundance_table = abundance_table[abundance_table['Process'].isin(processes)]\n# as_abundance_table = as_abundance_table.drop(columns=['Process'])\n# #group by date and find the mean of all values\n# as_abundance_table = as_abundance_table.groupby(['Date']).mean()\n# #remove last two rows of as_abundance_table\n# a = as_abundance_table.iloc[:,:-2]\n# a = a.reset_index()\n```\n:::\n\n\nTranspose data so numpy array is for each species\n\n::: {#3ca76355 .cell execution_count=3}\n``` {.python .cell-code}\n# species = a.T\n# #remove first row \n# species = species.iloc[1:,:]\n# species = species.reset_index()\n# headers = species.iloc[:,0]\n# species = species.iloc[:,1:]\n# headers = headers.to_numpy()\n# species = species.to_numpy()\n#structured_array = np.core.records.fromarrays(species, names=headers)\n\n#tranform to numpy array\n#species = species.to_numpy()\n```\n:::\n\n\n#### Filter species that sum less than 10\n\n::: {#a7728a3d .cell execution_count=4}\n``` {.python .cell-code}\n# mask = np.sum(species, axis=1) > 10\n# #remove numpy arrrays who sum to less than 10 counts\n# headers = headers[mask]\n# species = species[mask]\n```\n:::\n\n\n### Run AD-Dickey Fuller Test\n\n::: {#a453825a .cell execution_count=5}\n``` {.python .cell-code}\n# from collections import deque\n\n# def stationary_test(species):\n#     # create deque array\n#     result = deque()\n#     constant_counter = 0\n#     for i, value in enumerate(species):\n#         if value.max() == value.min():\n#             result.append(1)\n#             constant_counter += 1\n#             continue\n#         result.append(ts.adfuller(value)[1], 'n')\n\n#     print(constant_counter, 'species were constant (could not compute adfuller)')\n#     return np.array(result)\n\n# result = stationary_test(species)\n\n# # Create the mask\n# mask1 = (0.001 < result) & (result < 0.05)\n# mask2 = result > 0.05\n\n# headers_stationary = headers[mask1]\n# headers_non_stationary = headers[mask2]\n```\n:::\n\n\n::: {#aba66578 .cell execution_count=6}\n``` {.python .cell-code}\n# species_non_stationary = species[mask2]\n# species_non_stationary = species_non_stationary.astype(np.float64)\n\n# species_stationary = species[mask1]\n# species_stationary= species_stationary.astype(np.float64)\n```\n:::\n\n\nFor non-stationary data: shape = 4162\n\n#Johansen Test with only 12 groups\nPerform Johansen Test\n\n::: {#5d13cfc7 .cell execution_count=7}\n``` {.python .cell-code}\n# Johansen test\n# j_test = coint_johansen(species_non_stationary, det_order=0, k_ar_diff=1)\n\n# # Display the test statistics and critical values\n# trace_stat = j_test.lr1\n# critical_values = j_test.cvt\n\n# resulting_species = deque()\n# insufficient_data_species = deque()\n\n# for i in range(len(trace_stat)):\n#     if trace_stat[i] > critical_values[i][0]:\n#         resulting_species.append(0)\n#     if trace_stat[i] < critical_values[i][0]:\n#         resulting_species.append(1)\n#     if np.isnan(critical_values[i][0]) == True :\n#         resulting_species.append(0.5)\n#         insufficient_data_species.append(1)\n\n# cointegrated_mask = (resulting_species == 0)\n\n# headers_cointegrated = headers_stationary[cointegrated_mask ]\n```\n:::\n\n\nIf the trace statistic is greater than the critical value at a given significance level (e.g., 95%), reject the null hypothesis of no cointegration for that rank.\n\n\nFor stationary data: shape = 2646\n\n",
    "supporting": [
      "cointegration_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}