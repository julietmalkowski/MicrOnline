{
  "hash": "b2653eb0067ffc327e6e0d5706caabd0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Correlations\n---\n\n\n\nCorrelations describe the strength of association between two variables. By understanding if specific species have any relevant associations, it could be possible to determine a larger microbial community composition from just a few individual species.\n\n\n\n## Correlation between count data with Pearson Correlation Coefficient \nPearson’s Product - Moment Correlation Coefficient is a statistical measure of the strength of a linear relationship between paired data. It assumes that the data is:\n- interval or ratio level\n- linearly related\n- bivariate normally distributed\n\nThis graph shows correlations higher than 75%\n\n::: {#974da84f .cell execution_count=2}\n``` {.python .cell-code}\ncorrelation = np.corrcoef(a.T)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/julietmalkowski/Desktop/Research/Micro/env/lib/python3.10/site-packages/numpy/lib/_function_base_impl.py:2922: RuntimeWarning: invalid value encountered in divide\n  c /= stddev[:, None]\n/Users/julietmalkowski/Desktop/Research/Micro/env/lib/python3.10/site-packages/numpy/lib/_function_base_impl.py:2923: RuntimeWarning: invalid value encountered in divide\n  c /= stddev[None, :]\n```\n:::\n:::\n\n\n::: {#0fa4bf81 .cell execution_count=3}\n``` {.python .cell-code}\nmask = ((correlation > 0.75) & (correlation < 0.99)) | ((correlation < -0.75) & (correlation > -0.99))\n\ntriangle_mask = np.tri(correlation.shape[0], k=0)\n\n# Plotting\nfig = plt.figure()\n# Put in title and axis labels\nfig.suptitle('Correlation Matrix of OTU Counts Over Time')\nax = fig.add_subplot(111)\n\n# Use the mask to display the significant correlations\nmasked_correlation = np.ma.masked_where(~mask, correlation)\ntriangle_mask[triangle_mask == 0] = np.nan\n\ncax = ax.matshow(masked_correlation, cmap='coolwarm', vmin=-1, vmax=1)\nax.imshow(triangle_mask, cmap='twilight')\nfig.colorbar(cax)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](correlation_matrix_files/figure-html/cell-4-output-1.png){width=535 height=445}\n:::\n:::\n\n\n## Correlation with Spearman Correlation Coefficient\nBefore learning about Spearman’s correllation it is important to understand \nSpearman's Correlation Coefficient assumes a monotonic relationship- where the value of one variable increases then the other never does\nA monotonic relationship is a relationship that does one of the following: (1) as the value of one variable increases, so does the value of the other variable; or (2) as the value of one variable increases, the other variable value decreases\n\n::: {#c4604adc .cell execution_count=4}\n``` {.python .cell-code}\nas_abundance_table['sum'] = as_abundance_table.sum(axis=1)\nas_abundance_table = as_abundance_table.reset_index()\nas_abundance = as_abundance_table.set_index('Date')\n#find percentage each column by dividing by sum\nas_abundance = as_abundance.div(as_abundance['sum'], axis=0)\nas_abundance = as_abundance.drop(columns=['sum'])\n#pivot dataframe from wide to long format\nas_abundance = as_abundance.reset_index()\nas_abundance = as_abundance.melt(id_vars=['Date'], var_name='OTU', value_name='Abundance')\n#remove all rows with an abundance less than 0.01\n#as_abundance_low_filter = as_abundance[as_abundance['Abundance'] >= 0.0005] \nas_abundance = as_abundance[as_abundance['Abundance'] >= 0.005] \n\ndef shannon_index(x):\n    return -1 * np.sum(x*np.log(x))\n\nShannon_Diversity = as_abundance.groupby('Date')['Abundance'].agg(shannon_index).reset_index()\n\nas_abundance = as_abundance.merge(Shannon_Diversity, on='Date')\nas_abundance = as_abundance.rename(columns={'Abundance_x':'Abundance', 'Abundance_y':'Shannon Index'})\n\nas_abundance_table_moved = as_abundance_table.melt(id_vars=['Date'], var_name='OTU', value_name='Counts')\n\n#merging with as_abundance\nunfiltered_data = as_abundance.merge(as_abundance_table_moved, on=['Date','OTU'])\nunfiltered_abundnace = unfiltered_data.iloc[:,0:3]\nunfiltered_abundnace = pd.pivot(data = unfiltered_abundnace, index = 'Date', columns = 'OTU' , values = 'Abundance') \n#replace NAN values with 0\nunfiltered_abundnace = unfiltered_abundnace.fillna(0)\n#unfiltered_abundnace =unfiltered_abundnace.reset_index()\n#remove first column\n#unfiltered_abundnace = unfiltered_abundnace.iloc[:, 1:]\n#unfiltered_abundnace = unfiltered_abundnace.to_numpy()\n```\n:::\n\n\n::: {#9781ebc7 .cell execution_count=5}\n``` {.python .cell-code}\ncorr_matrix, p_matrix = scipy.stats.spearmanr(unfiltered_abundnace, axis=0)\n#statistical significance level of 0.05\ncorr_matrix[p_matrix>0.05] = np.nan\ncorr_matrix[corr_matrix>0.99] = np.nan\ntriangle_mask = np.tri(corr_matrix.shape[0], k=0)\n\nfig = plt.figure()\nfig.suptitle('P-value Matrix of OTU Counts Over Time Using Spearman')\nax = fig.add_subplot(111)\nmasked_correlation = np.ma.masked_where(triangle_mask, corr_matrix)\ntriangle_mask[triangle_mask == 0] = np.nan\n\ncax = ax.pcolormesh(corr_matrix,cmap='coolwarm', vmin=-1, vmax=1)\nax.imshow(triangle_mask, cmap='twilight')\nfig.colorbar(cax)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](correlation_matrix_files/figure-html/cell-6-output-1.png){width=518 height=459}\n:::\n:::\n\n\n## Cointegration between species\nSteps:\n1. check for stationarity for all species by running a unit root test\n2. check for stationarity in difference between all species\n\n",
    "supporting": [
      "correlation_matrix_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}