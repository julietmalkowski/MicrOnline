{
  "hash": "1842f0092c8ff1bb016d38657c0e1795",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Fourier Discrete Transform of Count Data\n---\n\n\n\n\n\n## Creating Count Data\n\n\n### Show Count Data\n\n::: {#a32f6441 .cell execution_count=3}\n``` {.python .cell-code}\n#remove last two rows of as_abundance_table\na = as_abundance_table.iloc[:,:-2]\na = a.reset_index()\nprint(a.head())\n#remove first column in a\na = a.iloc[:,1:]\n#tranform to numpy array\na = a.to_numpy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Date   121   22       4    61  9124   190    33   70  1716  ...  \\\n0  01/05/2023  66.5  0.0   267.5  27.0   0.0  17.0  34.0  0.5   0.0  ...   \n1  01/10/2023  86.0  0.0  1260.0  35.0   0.0  32.0  43.0  0.0   0.0  ...   \n2  01/12/2023  38.5  0.0   374.5  10.0   0.0  12.0  38.5  0.5   0.0  ...   \n3  01/17/2023  41.0  0.0   738.0  10.0   0.0  28.5  45.0  0.0   1.0  ...   \n4  01/19/2023  39.0  0.0   616.5  16.0   0.0  29.0  98.0  0.0   0.0  ...   \n\n   9558  12913  10999  13677  17024  11155  10242  6130  15569  17515  \n0   0.0    0.0    0.0    0.0    0.0    0.0    0.0   0.0    0.0    0.0  \n1   0.0    0.0    0.0    0.0    0.0    0.0    0.0   0.0    0.0    0.0  \n2   0.0    0.0    0.0    0.0    0.0    0.0    0.0   0.0    0.0    0.0  \n3   0.0    0.0    0.0    0.0    0.0    0.0    0.0   0.0    0.0    0.0  \n4   0.0    0.0    0.0    0.0    0.0    0.0    0.0   0.0    0.0    0.0  \n\n[5 rows x 16033 columns]\n```\n:::\n:::\n\n\n## Fourier Transform of Count Data\n\n::: {#10ae43ac .cell execution_count=4}\n``` {.python .cell-code}\ndef FFT(input_array):\n\n    fig, ax = plt.subplots(2, 1, figsize=(10, 10))\n\n    #Taking each OTU and fourier transforming its signal through time\n    for i in range(input_array.shape[1]):\n        ax[0].plot(input_array[:,i])\n\n        #Calculate the FFT\n        #calculate fourier transform by using np.fft.fft to calculate fft of each column (each OTU count through time)\n        #calculate the fourier sample frequencies by using np.fft.fftfreq\n        #Use np.fft.fftshift to shift the zero-frequency component to the center of the spectrum.\n\n        fft = np.fft.fftshift(np.fft.fft(input_array[:,i]))\n        fft_freq = np.fft.fftshift(np.fft.fftfreq(len(fft)))\n\n        fft = np.abs(fft[fft_freq > 0])\n        fft_freq = fft_freq[fft_freq > 0]\n\n        ax[1].plot(fft_freq, fft)\n\n    ax[0].set_title('Input signal')\n    ax[0].set_xlabel('Time')\n    ax[0].set_ylabel('Amplitude')\n\n    ax[1].set_title('FFT of the signal')\n    ax[1].set_xlabel('Frequency')\n    ax[1].set_ylabel('Amplitude')\n\n    plt.show()\n\nFFT(a.copy())\n```\n\n::: {.cell-output .cell-output-display}\n![](fourier_transform_files/figure-html/cell-5-output-1.png){width=833 height=819}\n:::\n:::\n\n\n",
    "supporting": [
      "fourier_transform_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}