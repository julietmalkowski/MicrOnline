{
  "hash": "99846742f37adb59372f72ea296a5cc5",
  "result": {
    "engine": "knitr",
    "markdown": "# Indicator Species\n\nLoading dependencies\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(indicspecies)\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(ape)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(ggvenn)\nlibrary(fmsb)\nlibrary(eulerr)\nlibrary(plotly)\n```\n:::\n\n\n\n\n## Analysis on the 7 wwtp processes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabundance_table <- read_excel(\"/Users/julietmalkowski/Desktop/Research/Kinetic_Model/abundance_table.xlsx\")\n\n#remove first 4 characters in every column name\ncolnames(abundance_table)<- substr(colnames(abundance_table), 5, nchar(colnames(abundance_table)))\nabundance_table = as.data.frame(abundance_table)\n#split first column by character '_' into two seperate columns\nabundance_table[c('Process', 'Date')] <- str_split_fixed(abundance_table$le, '_', 2)\n#drop le column\nabundance_table = abundance_table[,-1]\n#move last two columns to the front\nabundance_table <- abundance_table %>%\n  select(Process, everything())\nabundance_table <- abundance_table %>%\n  select(Date, everything())\n\n#split first column by character '_' into two separate columns\nabundance_table[c('Month', 'Year')] <- str_split_fixed(abundance_table$Date, '/', 2)\nabundance_table <- abundance_table %>%\n  select(Month, everything())\n#turn Month column into numeric\nabundance_table$Month <- as.numeric(abundance_table$Month)\n#Change AS-1 and AS-2 to AS\nabundance_table$Process <- gsub(\"AS-1\", \"AS\", abundance_table$Process)\nabundance_table$Process <- gsub(\"AS-2\", \"AS\", abundance_table$Process)\n\n\n### Looking at each process\n# Codes for each group:\n# AD = 1\n# AS = 2\n# Eff = 3\n# Inf = 4\n# TF = 5\n# TSS = 6\n# WAS = 7\n\n#Replace process names with codes\nabundance_table$Process <- gsub(\"AD\", \"1\", abundance_table$Process)\nabundance_table$Process <- gsub(\"AS\", \"2\", abundance_table$Process)\nabundance_table$Process <- gsub(\"Eff\", \"3\", abundance_table$Process)\nabundance_table$Process <- gsub(\"Inf\", \"4\", abundance_table$Process)\nabundance_table$Process <- gsub(\"TF\", \"5\", abundance_table$Process)\nabundance_table$Process <- gsub(\"TSS\", \"6\", abundance_table$Process)\nabundance_table$Process <- gsub(\"W2\", \"7\", abundance_table$Process)\n\ndf1 <- abundance_table %>%\n  select(-Year, -Date,-Month)\n\n#Running Indicator Species Analysis\ngroupings = df1$Process\n\n#duleg = TRUE which means that site group combinations will not be considered\nindval <- multipatt(df1[,c(2:ncol(df1))], groupings, \n                    control = how(nperm=999),duleg = TRUE) \n\nsig.otus <- indval$sign %>% mutate(otu = rownames(.)) %>% filter(p.value < 0.01) %>% filter(stat > 0.5)\n\nsig.otus <- indval$sign %>% mutate(index = case_when(index == 1 ~ \"AD\",\n                                                           index == 2 ~ \"AS\",\n                                                           index == 3 ~ \"Eff\",\n                                                           index == 4 ~ \"Inf\",\n                                                           index == 5 ~ \"TF\",\n                                                           index == 6 ~ \"TSS\",\n                                                           index == 7 ~ \"WAS\"))\n\nsig.otus <- sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(OTU = paste0(\"Zotu\",otu)) \n```\n:::\n\n\n\n\n### Attaching taxonomic informaiton to indicator species in each group\nShown by variables: ad, as, eff, inf, tf, tss, and was\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxa = read_excel(\"/Users/julietmalkowski/Desktop/Research/Kinetic_Model/tax.xlsx\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nâ€¢ `` -> `...1`\n```\n\n\n:::\n\n```{.r .cell-code}\nmerged_df <- merge(sig.otus, taxa[, c(\"OTU\", \"genus\")], by = \"OTU\")\n\n#create a new dataframe for each unique index value\n\ngrouped_list <- merged_df %>%\n  group_by(index) %>%\n  summarize(Values = list(genus))\n\nad <- unique(grouped_list$Values[grouped_list$index == \"AD\"][[1]])\nas <- unique(grouped_list$Values[grouped_list$index == \"AS\"][[1]])\neff <- unique(grouped_list$Values[grouped_list$index == \"Eff\"][[1]])\ninf <- unique(grouped_list$Values[grouped_list$index == \"Inf\"][[1]])\ntf <- unique(grouped_list$Values[grouped_list$index == \"TF\"][[1]])\ntss <- unique(grouped_list$Values[grouped_list$index == \"TSS\"][[1]])\nwas <- unique(grouped_list$Values[grouped_list$index == \"WAS\"][[1]])\n```\n:::\n\n\n\n\n\n## Looking at different seasons for each process\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassign_season <- function(Month) {\n  if (Month %in% c(12, 01, 02)) {\n    return(\"Winter\")\n  } else if (Month %in% c(03, 04, 05)) {\n    return(\"Spring\")\n  } else if (Month %in% c(06, 07, 08)) {\n    return(\"Summer\")\n  } else if (Month %in% c(09, 10, 11)) {\n    return(\"Fall\")\n  } else {\n    return(NA)\n  }\n}\n\ndf <- abundance_table %>%\n  mutate(Season = sapply(Month, assign_season)) %>%\n  group_by(Season, Process) %>%\n  mutate(Group = cur_group_id()) %>%\n  ungroup()\n\ndf <- df %>% select(Group,Process, Season, Month, everything())\n\n#Codes for each group:\n# AD-Fall = 1\n# AS-Fall = 2\n# Eff-Fall = 3\n# Inf-Fall = 4\n# TF-Fall = 5\n# TSS_Fall = 6\n# WAS-Fall = 7\n# AD-Spring = 8\n# AS-Spring = 9\n# Eff-Spring = 10\n# Inf-Spring = 11\n# TF-Spring = 12\n# TSS-Spring = 13\n# WAS-Spring = 14\n# AD-Summer = 15\n# AS-Summer = 16\n# Eff-Summer = 17\n# Inf-Summer = 18\n# TF-Summer = 19\n# TSS-Summer = 20\n# WAS-Summer = 21\n# AD-Winter = 22\n# AS-Winter = 23\n# Eff-Winter = 24\n# Inf-Winter = 25\n# TF-Winter = 26\n# TSS-Winter = 27\n# WAS-Winter = 28\n\n#Now we have our dataframe that contains a unique group number for each process and season\ndf <- df %>%\n  select(-Year, -Process, -Date, -Season, -Month)\n\n#Species groups\nAD = c(1, 8, 15, 22)\nAS = c(2, 9, 16, 23)\nEff = c(3, 10, 17, 24)\nInf_ = c(4, 11, 18, 25)\nTF = c(5, 12, 19, 26)\nTSS = c(6, 13, 20, 27)\nWAS = c(7, 14, 21, 28)\n\n#Individual Species Analysis\nad_df = df %>% filter(Group %in% AD)\nas_df = df %>% filter(Group %in% AS)\neff_df = df %>% filter(Group %in% Eff)\ninf_df = df %>% filter(Group %in% Inf_)\ntf_df = df %>% filter(Group %in% TF)\ntss_df = df %>% filter(Group %in% TSS)\nwas_df = df %>% filter(Group %in% WAS)\n```\n:::\n\n\n\n\n### Anaerobic Digester\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#AD\ngroupings = ad_df$Group\nindval_ad <- multipatt(ad_df[,c(2:ncol(ad_df))], groupings, \n                       control = how(nperm=999),duleg = FALSE) \n\n#change index column values if index=1 then change to AD-Fall etc\nad_sig.otus <- indval_ad$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                           index == 2 ~ \"Spring\",\n                                                           index == 3 ~ \"Summer\",\n                                                           index == 4 ~ \"Winter\",\n                                                           index == 5 ~ \"Fall-Spring\",\n                                                           index == 6 ~ \"Fall-Summer\",\n                                                           index == 7 ~ \"Fall-Winter\",\n                                                           index == 8 ~ \"Spring-Summer\",\n                                                           index == 9 ~ \"Spring-Winter\",\n                                                           index == 10 ~ \"Summer-Winter\",\n                                                           index == 11 ~ \"Fall-Spring-Summer\",\n                                                           index == 12 ~ \"Fall-Spring-Winter\",\n                                                           index == 13 ~ \"Fall-Summer-Winter\",\n                                                           index == 14 ~ \"Spring-Summer-Winter\",\n                                                           index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\nad_sig.otus <- ad_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))\n\ngrouped_list_ad <- ad_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(Value))\n\nfall_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Fall\"][[1]]\nspring_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Spring\"][[1]]\nsummer_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Summer\"][[1]]\nwinter_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Winter\"][[1]]\nfall_spring_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Spring\"][[1]]\nfall_summer_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Summer\"][[1]]\nfall_winter_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Winter\"][[1]]\nspring_summer_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Spring-Summer\"][[1]]\nspring_winter_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Spring-Winter\"][[1]]\n#summer_winter_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Summer-Winter\"][[1]]\nfall_spring_summer_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Spring-Summer\"][[1]]\nfall_spring_winter_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Spring-Winter\"][[1]]\nfall_summer_winter_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Summer-Winter\"][[1]]\n#spring_summer_winter_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Spring-Summer-Winter\"][[1]]\n#fall_spring_summer_winter_ad <- grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Spring-Summer-Winter\"][[1]]\n\n\n# Define the sizes of each set and their intersections\nset_sizes <- c(\n  Fall = ad_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = ad_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = ad_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = ad_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = ad_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = ad_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = ad_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = ad_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = ad_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = ad_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring-Summer\" = ad_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring-Winter\" = ad_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer-Winter\" = ad_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = ad_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = ad_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Function to filter out small overlaps\nfilter_data <- function(data, threshold = 0.01) {\n  # Calculate the total size\n  total <- sum(data)\n  # Filter out entries that are below the threshold percentage of the total size\n  filtered_data <- data[data / total >= threshold]\n  return(filtered_data)\n}\n\n# Filter the data\nfiltered_data <- filter_data(set_sizes)\n\n# Create the Euler diagram\nfit <- euler(filtered_data)\n\n# Plot the Euler diagram\nplot(fit, labels = list(fontfamily = \"serif\"),\n                quantities = list(type = \"counts\", font = 3), main = \"Seasonal Comparison of Indicator Species in AD system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n### Activated Sludge \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#AS\ngroupings = as_df$Group\nindval_as <- multipatt(as_df[,c(2:ncol(as_df))], groupings, \n                       control = how(nperm=999),duleg = FALSE) \n\n#change index column values if index=1 then change to AD-Fall etc\nas_sig.otus <- indval_as$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                           index == 2 ~ \"Spring\",\n                                                           index == 3 ~ \"Summer\",\n                                                           index == 4 ~ \"Winter\",\n                                                           index == 5 ~ \"Fall-Spring\",\n                                                           index == 6 ~ \"Fall-Summer\",\n                                                           index == 7 ~ \"Fall-Winter\",\n                                                           index == 8 ~ \"Spring-Summer\",\n                                                           index == 9 ~ \"Spring-Winter\",\n                                                           index == 10 ~ \"Summer-Winter\",\n                                                           index == 11 ~ \"Fall-Spring-Summer\",\n                                                           index == 12 ~ \"Fall-Spring-Winter\",\n                                                           index == 13 ~ \"Fall-Summer-Winter\",\n                                                           index == 14 ~ \"Spring-Summer-Winter\",\n                                                           index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\nas_sig.otus <- as_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))\n\ngrouped_list_as <- as_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(Value))\n\nfall_as <- grouped_list_as$Values[grouped_list_as$index == \"Fall\"][[1]]\nspring_as <- grouped_list_as$Values[grouped_list_as$index == \"Spring\"][[1]]\nsummer_as <- grouped_list_as$Values[grouped_list_as$index == \"Summer\"][[1]]\nwinter_as <- grouped_list_as$Values[grouped_list_as$index == \"Winter\"][[1]]\nfall_spring_as <- grouped_list_as$Values[grouped_list_as$index == \"Fall-Spring\"][[1]]\nfall_summer_as <- grouped_list_as$Values[grouped_list_as$index == \"Fall-Summer\"][[1]]\nfall_winter_as <- grouped_list_as$Values[grouped_list_as$index == \"Fall-Winter\"][[1]]\nspring_summer_as <- grouped_list_as$Values[grouped_list_as$index == \"Spring-Summer\"][[1]]\nspring_winter_as <- grouped_list_as$Values[grouped_list_as$index == \"Spring-Winter\"][[1]]\n#summer_winter_as <- grouped_list_as$Values[grouped_list_as$index == \"Summer-Winter\"][[1]]\nfall_spring_summer_as <- grouped_list_as$Values[grouped_list_as$index == \"Fall-Spring-Summer\"][[1]]\nfall_spring_winter_as <- grouped_list_as$Values[grouped_list_as$index == \"Fall-Spring-Winter\"][[1]]\nfall_summer_winter_as <- grouped_list_as$Values[grouped_list_as$index == \"Fall-Summer-Winter\"][[1]]\n#spring_summer_winter_as <- grouped_list_as$Values[grouped_list_as$index == \"Spring-Summer-Winter\"][[1]]\n#fall_spring_summer_winter_as <- grouped_list_as$Values[grouped_list_as$index == \"Fall-Spring-Summer-Winter\"][[1]]\n\n\n# Define the sizes of each set and their intersections\nset_sizes_as <- c(\n  Fall = as_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = as_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = as_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = as_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = as_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = as_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = as_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = as_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = as_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = as_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring-Summer\" = as_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring-Winter\" = as_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer-Winter\" = as_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = as_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = as_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_as <- filter_data(set_sizes_as)\n\n# Create the Euler diagram\nfit_as <- euler(filtered_data_as)\n\n# Plot the Euler diagram\nplot(fit_as, labels = list(fontfamily = \"serif\"),\n     quantities = list(type = \"counts\", font = 3), main = \"Seasonal Comparison of Indicator Species in AS system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n### Effluent\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Eff\ngroupings = eff_df$Group\nindval_eff <- multipatt(eff_df[,c(2:ncol(eff_df))], groupings, \n                        control = how(nperm=999),duleg = FALSE)\n\n#change index column values if index=1 then change to AD-Fall etc\neff_sig.otus <- indval_eff$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                             index == 2 ~ \"Spring\",\n                                                             index == 3 ~ \"Summer\",\n                                                             index == 4 ~ \"Winter\",\n                                                             index == 5 ~ \"Fall-Spring\",\n                                                             index == 6 ~ \"Fall-Summer\",\n                                                             index == 7 ~ \"Fall-Winter\",\n                                                             index == 8 ~ \"Spring-Summer\",\n                                                             index == 9 ~ \"Spring-Winter\",\n                                                             index == 10 ~ \"Summer-Winter\",\n                                                             index == 11 ~ \"Fall-Spring-Summer\",\n                                                             index == 12 ~ \"Fall-Spring-Winter\",\n                                                             index == 13 ~ \"Fall-Summer-Winter\",\n                                                             index == 14 ~ \"Spring-Summer-Winter\",\n                                                             index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\neff_sig.otus <- eff_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))\n\n#create a new dataframe for each unique index value\n\ngrouped_list_eff <- eff_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(Value))\n\nfall_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Fall\"][[1]]\nspring_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Spring\"][[1]]\nsummer_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Summer\"][[1]]\nwinter_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Winter\"][[1]]\nfall_spring_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Spring\"][[1]]\nfall_summer_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Summer\"][[1]]\nfall_winter_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Winter\"][[1]]\nspring_summer_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Spring-Summer\"][[1]]\nspring_winter_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Spring-Winter\"][[1]]\nsummer_winter_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Summer-Winter\"][[1]]\nfall_spring_summer_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Spring-Summer\"][[1]]\nfall_spring_winter_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Spring-Winter\"][[1]]\nfall_summer_winter_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Summer-Winter\"][[1]]\nspring_summer_winter_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Spring-Summer-Winter\"][[1]]\n#fall_spring_summer_winter_eff <- grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Spring-Summer-Winter\"][[1]]\n\n\n# Define the sizes of each set and their intersections\nset_sizes_eff <- c(\n  Fall = eff_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = eff_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = eff_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = eff_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = eff_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = eff_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = eff_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = eff_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = eff_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = eff_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring-Summer\" = eff_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring-Winter\" = eff_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer-Winter\" = eff_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = eff_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = eff_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_eff <- filter_data(set_sizes_eff)\n\n# Create the Euler diagram\nfit_eff <- euler(filtered_data_eff)\n\n# Plot the Euler diagram\nplot(fit_eff, labels = list(fontfamily = \"serif\"),\n     quantities = list(type = \"counts\", font = 3), main = \"Seasonal Comparison of Indicator Species in Eff system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n### Influent\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Inf\ngroupings = inf_df$Group\nindval_inf <- multipatt(inf_df[,c(2:ncol(inf_df))], groupings, \n                        control = how(nperm=999),duleg = FALSE)\n\n#change index column values if index=1 then change to AD-Fall etc\ninf_sig.otus <- indval_inf$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                             index == 2 ~ \"Spring\",\n                                                             index == 3 ~ \"Summer\",\n                                                             index == 4 ~ \"Winter\",\n                                                             index == 5 ~ \"Fall-Spring\",\n                                                             index == 6 ~ \"Fall-Summer\",\n                                                             index == 7 ~ \"Fall-Winter\",\n                                                             index == 8 ~ \"Spring-Summer\",\n                                                             index == 9 ~ \"Spring-Winter\",\n                                                             index == 10 ~ \"Summer-Winter\",\n                                                             index == 11 ~ \"Fall-Spring-Summer\",\n                                                             index == 12 ~ \"Fall-Spring-Winter\",\n                                                             index == 13 ~ \"Fall-Summer-Winter\",\n                                                             index == 14 ~ \"Spring-Summer-Winter\",\n                                                             index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\ninf_sig.otus <- inf_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))\n\n#create a new dataframe for each unique index value\n\ngrouped_list_inf <- inf_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(Value))\n\nfall_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Fall\"][[1]]\nspring_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Spring\"][[1]]\nsummer_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Summer\"][[1]]\nwinter_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Winter\"][[1]]\nfall_spring_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Spring\"][[1]]\nfall_summer_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Summer\"][[1]]\nfall_winter_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Winter\"][[1]]\nspring_summer_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Spring-Summer\"][[1]]\nspring_winter_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Spring-Winter\"][[1]]\nsummer_winter_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Summer-Winter\"][[1]]\nfall_spring_summer_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Spring-Summer\"][[1]]\nfall_spring_winter_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Spring-Winter\"][[1]]\nfall_summer_winter_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Summer-Winter\"][[1]]\nspring_summer_winter_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Spring-Summer-Winter\"][[1]]\n#fall_spring_summer_winter_inf <- grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Spring-Summer-Winter\"][[1]]\n\n\n\n# Define the sizes of each set and their intersections\nset_sizes_inf <- c(\n  Fall = inf_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = inf_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = inf_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = inf_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = inf_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = inf_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = inf_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = inf_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = inf_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = inf_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring-Summer\" = inf_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring-Winter\" = inf_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer-Winter\" = inf_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = inf_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = inf_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_inf <- filter_data(set_sizes_inf)\n\n# Create the Euler diagram\nfit_inf <- euler(filtered_data_inf)\n\n# Plot the Euler diagram\nplot(fit_inf, labels = list(fontfamily = \"serif\"),\n     quantities = list(type = \"counts\", font = 3), main = \"Seasonal Comparison of Indicator Species in Inf system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n### Trickling Filter\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#TF\ngroupings = tf_df$Group\nindval_tf <- multipatt(tf_df[,c(2:ncol(tf_df))], groupings, \n                       control = how(nperm=999),duleg = FALSE)\n\n#change index column values if index=1 then change to AD-Fall etc\ntf_sig.otus <- indval_tf$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                           index == 2 ~ \"Spring\",\n                                                           index == 3 ~ \"Summer\",\n                                                           index == 4 ~ \"Winter\",\n                                                           index == 5 ~ \"Fall-Spring\",\n                                                           index == 6 ~ \"Fall-Summer\",\n                                                           index == 7 ~ \"Fall-Winter\",\n                                                           index == 8 ~ \"Spring-Summer\",\n                                                           index == 9 ~ \"Spring-Winter\",\n                                                           index == 10 ~ \"Summer-Winter\",\n                                                           index == 11 ~ \"Fall-Spring-Summer\",\n                                                           index == 12 ~ \"Fall-Spring-Winter\",\n                                                           index == 13 ~ \"Fall-Summer-Winter\",\n                                                           index == 14 ~ \"Spring-Summer-Winter\",\n                                                           index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\ntf_sig.otus <- tf_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))\n\ngrouped_list_tf <- tf_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(Value))\n\nfall_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Fall\"][[1]]\nspring_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Spring\"][[1]]\nsummer_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Summer\"][[1]]\nwinter_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Winter\"][[1]]\nfall_spring_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Spring\"][[1]]\nfall_summer_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Summer\"][[1]]\nfall_winter_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Winter\"][[1]]\nspring_summer_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Spring-Summer\"][[1]]\nspring_winter_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Spring-Winter\"][[1]]\nsummer_winter_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Summer-Winter\"][[1]]\nfall_spring_summer_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Spring-Summer\"][[1]]\nfall_spring_winter_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Spring-Winter\"][[1]]\nfall_summer_winter_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Summer-Winter\"][[1]]\nspring_summer_winter_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Spring-Summer-Winter\"][[1]]\n#fall_spring_summer_winter_tf <- grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Spring-Summer-Winter\"][[1]]\n\n\n# Define the sizes of each set and their intersections\nset_sizes_tf <- c(\n  Fall = tf_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = tf_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = tf_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = tf_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = tf_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = tf_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = tf_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = tf_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = tf_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = tf_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring-Summer\" = tf_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring-Winter\" = tf_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer-Winter\" = tf_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = tf_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = tf_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_tf <- filter_data(set_sizes_tf)\n\n# Create the Euler diagram\nfit_tf <- euler(filtered_data_tf)\n\n# Plot the Euler diagram\nplot(fit_tf, labels = list(fontfamily = \"serif\"),\n     quantities = list(type = \"counts\", font = 3), main = \"Seasonal Comparison of Indicator Species in TF system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n### TSS\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#TSS\ngroupings = tss_df$Group\nindval_tss <- multipatt(tss_df[,c(2:ncol(tss_df))], groupings, \n                        control = how(nperm=999),duleg = FALSE)\n\nsummary(indval_tss, indvalcomp=TRUE, alpha = 0.001)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Multilevel pattern analysis\n ---------------------------\n\n Association function: IndVal.g\n Significance level (alpha): 0.001\n\n Total number of species: 16034\n Selected number of species: 1820 \n Number of species associated to 1 group: 791 \n Number of species associated to 2 groups: 530 \n Number of species associated to 3 groups: 499 \n\n List of species associated to each combination: \n\n Group 6  #sps.  35 \n           A      B  stat p.value    \n70    0.9157 1.0000 0.957   0.001 ***\n4074  0.8929 1.0000 0.945   0.001 ***\n724   0.9529 0.8750 0.913   0.001 ***\n2177  0.9259 0.8750 0.900   0.001 ***\n1722  0.7882 1.0000 0.888   0.001 ***\n1666  0.7646 1.0000 0.874   0.001 ***\n2641  0.8605 0.8750 0.868   0.001 ***\n1331  1.0000 0.7500 0.866   0.001 ***\n363   1.0000 0.7500 0.866   0.001 ***\n1396  0.9777 0.7500 0.856   0.001 ***\n1650  0.9763 0.7500 0.856   0.001 ***\n1680  0.9697 0.7500 0.853   0.001 ***\n1087  0.9564 0.7500 0.847   0.001 ***\n2872  0.9545 0.7500 0.846   0.001 ***\n244   0.8062 0.8750 0.840   0.001 ***\n1269  0.9398 0.7500 0.840   0.001 ***\n392   0.9398 0.7500 0.840   0.001 ***\n2293  0.9032 0.7500 0.823   0.001 ***\n4195  0.8974 0.7500 0.820   0.001 ***\n3706  0.8873 0.7500 0.816   0.001 ***\n951   0.7574 0.8750 0.814   0.001 ***\n6310  1.0000 0.6250 0.791   0.001 ***\n583   1.0000 0.6250 0.791   0.001 ***\n2060  1.0000 0.6250 0.791   0.001 ***\n2914  1.0000 0.6250 0.791   0.001 ***\n4280  1.0000 0.6250 0.791   0.001 ***\n15534 1.0000 0.6250 0.791   0.001 ***\n1760  0.8108 0.7500 0.780   0.001 ***\n514   0.9533 0.6250 0.772   0.001 ***\n2791  0.9524 0.6250 0.772   0.001 ***\n1292  0.9500 0.6250 0.771   0.001 ***\n1527  0.7902 0.7500 0.770   0.001 ***\n4003  0.9322 0.6250 0.763   0.001 ***\n3391  0.8475 0.6250 0.728   0.001 ***\n5305  0.8333 0.6250 0.722   0.001 ***\n\n Group 13  #sps.  108 \n           A      B  stat p.value    \n3051  0.9697 1.0000 0.985   0.001 ***\n2819  0.9374 1.0000 0.968   0.001 ***\n5586  0.9283 1.0000 0.963   0.001 ***\n10253 0.8989 1.0000 0.948   0.001 ***\n14008 1.0000 0.8889 0.943   0.001 ***\n2158  0.8802 1.0000 0.938   0.001 ***\n10743 0.9730 0.8889 0.930   0.001 ***\n12338 0.9670 0.8889 0.927   0.001 ***\n3259  0.8492 1.0000 0.921   0.001 ***\n5583  0.9462 0.8889 0.917   0.001 ***\n17550 0.9343 0.8889 0.911   0.001 ***\n1977  0.9335 0.8889 0.911   0.001 ***\n13546 0.9302 0.8889 0.909   0.001 ***\n4858  0.9143 0.8889 0.901   0.001 ***\n11207 0.9072 0.8889 0.898   0.001 ***\n13520 0.7907 1.0000 0.889   0.001 ***\n12090 1.0000 0.7778 0.882   0.001 ***\n10867 1.0000 0.7778 0.882   0.001 ***\n8016  0.8670 0.8889 0.878   0.001 ***\n6766  0.8612 0.8889 0.875   0.001 ***\n1777  0.7619 1.0000 0.873   0.001 ***\n7714  0.8454 0.8889 0.867   0.001 ***\n11392 0.8421 0.8889 0.865   0.001 ***\n10294 0.8421 0.8889 0.865   0.001 ***\n9671  0.9585 0.7778 0.863   0.001 ***\n9084  0.7429 1.0000 0.862   0.001 ***\n4215  0.8348 0.8889 0.861   0.001 ***\n2111  0.8344 0.8889 0.861   0.001 ***\n4670  0.8314 0.8889 0.860   0.001 ***\n7141  0.9455 0.7778 0.858   0.001 ***\n7554  0.7347 1.0000 0.857   0.001 ***\n4283  0.7273 1.0000 0.853   0.001 ***\n6749  0.9302 0.7778 0.851   0.001 ***\n7958  0.9256 0.7778 0.848   0.001 ***\n15354 0.9256 0.7778 0.848   0.001 ***\n6948  0.8000 0.8889 0.843   0.001 ***\n17247 0.9143 0.7778 0.843   0.001 ***\n7075  0.7097 1.0000 0.842   0.001 ***\n18074 0.7939 0.8889 0.840   0.001 ***\n12102 0.8989 0.7778 0.836   0.001 ***\n9932  0.8989 0.7778 0.836   0.001 ***\n7679  0.8989 0.7778 0.836   0.001 ***\n12304 0.8889 0.7778 0.831   0.001 ***\n12714 0.7716 0.8889 0.828   0.001 ***\n6963  0.7652 0.8889 0.825   0.001 ***\n18024 0.7652 0.8889 0.825   0.001 ***\n7101  0.7577 0.8889 0.821   0.001 ***\n10231 0.7568 0.8889 0.820   0.001 ***\n4319  1.0000 0.6667 0.816   0.001 ***\n15552 1.0000 0.6667 0.816   0.001 ***\n16070 1.0000 0.6667 0.816   0.001 ***\n12839 0.7399 0.8889 0.811   0.001 ***\n18302 0.8421 0.7778 0.809   0.001 ***\n10685 0.8421 0.7778 0.809   0.001 ***\n10790 0.7353 0.8889 0.808   0.001 ***\n6120  0.7273 0.8889 0.804   0.001 ***\n10461 0.7273 0.8889 0.804   0.001 ***\n6395  0.8302 0.7778 0.804   0.001 ***\n9638  0.8235 0.7778 0.800   0.001 ***\n14814 0.7134 0.8889 0.796   0.001 ***\n11227 0.8085 0.7778 0.793   0.001 ***\n11561 0.7070 0.8889 0.793   0.001 ***\n7994  0.7980 0.7778 0.788   0.001 ***\n11941 0.9302 0.6667 0.787   0.001 ***\n8019  0.7964 0.7778 0.787   0.001 ***\n13256 0.7939 0.7778 0.786   0.001 ***\n13567 0.7874 0.7778 0.783   0.001 ***\n8154  0.9143 0.6667 0.781   0.001 ***\n12252 0.7805 0.7778 0.779   0.001 ***\n12445 0.7805 0.7778 0.779   0.001 ***\n14405 0.9072 0.6667 0.778   0.001 ***\n16604 0.9072 0.6667 0.778   0.001 ***\n3764  0.9072 0.6667 0.778   0.001 ***\n14950 0.9032 0.6667 0.776   0.001 ***\n14970 0.7731 0.7778 0.775   0.001 ***\n10466 0.8989 0.6667 0.774   0.001 ***\n4233  0.7568 0.7778 0.767   0.001 ***\n10257 0.7568 0.7778 0.767   0.001 ***\n18097 0.7568 0.7778 0.767   0.001 ***\n15729 0.6617 0.8889 0.767   0.001 ***\n11239 0.8767 0.6667 0.765   0.001 ***\n15025 0.8767 0.6667 0.765   0.001 ***\n12134 0.8696 0.6667 0.761   0.001 ***\n5743  0.8615 0.6667 0.758   0.001 ***\n9523  0.8615 0.6667 0.758   0.001 ***\n16187 0.8615 0.6667 0.758   0.001 ***\n8601  0.8594 0.6667 0.757   0.001 ***\n3950  0.8525 0.6667 0.754   0.001 ***\n14379 0.7273 0.7778 0.752   0.001 ***\n14510 0.7273 0.7778 0.752   0.001 ***\n17179 0.7273 0.7778 0.752   0.001 ***\n18003 0.8421 0.6667 0.749   0.001 ***\n11021 0.8421 0.6667 0.749   0.001 ***\n12938 0.8421 0.6667 0.749   0.001 ***\n9442  0.8421 0.6667 0.749   0.001 ***\n14036 1.0000 0.5556 0.745   0.001 ***\n11037 1.0000 0.5556 0.745   0.001 ***\n18196 1.0000 0.5556 0.745   0.001 ***\n7628  1.0000 0.5556 0.745   0.001 ***\n12649 1.0000 0.5556 0.745   0.001 ***\n11791 1.0000 0.5556 0.745   0.001 ***\n7687  0.8163 0.6667 0.738   0.001 ***\n12489 0.8000 0.6667 0.730   0.001 ***\n13706 0.8000 0.6667 0.730   0.001 ***\n16910 0.8000 0.6667 0.730   0.001 ***\n12065 0.7939 0.6667 0.728   0.001 ***\n11383 0.7568 0.6667 0.710   0.001 ***\n16632 0.7568 0.6667 0.710   0.001 ***\n\n Group 20  #sps.  626 \n          A      B  stat p.value    \n217  1.0000 1.0000 1.000   0.001 ***\n1487 1.0000 1.0000 1.000   0.001 ***\n604  1.0000 1.0000 1.000   0.001 ***\n655  0.9697 1.0000 0.985   0.001 ***\n1028 0.9697 1.0000 0.985   0.001 ***\n259  0.9682 1.0000 0.984   0.001 ***\n628  0.9658 1.0000 0.983   0.001 ***\n528  0.9597 1.0000 0.980   0.001 ***\n175  0.9596 1.0000 0.980   0.001 ***\n247  0.9585 1.0000 0.979   0.001 ***\n2553 0.9541 1.0000 0.977   0.001 ***\n377  0.9538 1.0000 0.977   0.001 ***\n421  0.9496 1.0000 0.974   0.001 ***\n783  0.9491 1.0000 0.974   0.001 ***\n39   0.9490 1.0000 0.974   0.001 ***\n249  0.9462 1.0000 0.973   0.001 ***\n483  0.9438 1.0000 0.972   0.001 ***\n606  0.9412 1.0000 0.970   0.001 ***\n919  0.9409 1.0000 0.970   0.001 ***\n1392 0.9405 1.0000 0.970   0.001 ***\n843  0.9398 1.0000 0.969   0.001 ***\n469  0.9367 1.0000 0.968   0.001 ***\n3839 0.9351 1.0000 0.967   0.001 ***\n2957 0.9333 1.0000 0.966   0.001 ***\n3717 0.9315 1.0000 0.965   0.001 ***\n1227 0.9292 1.0000 0.964   0.001 ***\n1113 0.9282 1.0000 0.963   0.001 ***\n2297 0.9275 1.0000 0.963   0.001 ***\n3338 0.9275 1.0000 0.963   0.001 ***\n266  0.9226 1.0000 0.961   0.001 ***\n1218 0.9215 1.0000 0.960   0.001 ***\n824  0.9215 1.0000 0.960   0.001 ***\n3553 0.9206 1.0000 0.959   0.001 ***\n350  0.9191 1.0000 0.959   0.001 ***\n1566 0.9171 1.0000 0.958   0.001 ***\n105  0.9165 1.0000 0.957   0.001 ***\n1031 0.9157 1.0000 0.957   0.001 ***\n1804 0.9148 1.0000 0.956   0.001 ***\n352  0.9141 1.0000 0.956   0.001 ***\n785  0.9139 1.0000 0.956   0.001 ***\n1217 0.9137 1.0000 0.956   0.001 ***\n3882 0.9137 1.0000 0.956   0.001 ***\n1309 0.9123 1.0000 0.955   0.001 ***\n1913 0.9080 1.0000 0.953   0.001 ***\n1567 0.9071 1.0000 0.952   0.001 ***\n1253 0.9068 1.0000 0.952   0.001 ***\n245  0.9058 1.0000 0.952   0.001 ***\n62   0.9047 1.0000 0.951   0.001 ***\n491  0.9009 1.0000 0.949   0.001 ***\n141  0.9001 1.0000 0.949   0.001 ***\n2190 1.0000 0.9000 0.949   0.001 ***\n3683 1.0000 0.9000 0.949   0.001 ***\n2338 0.9000 1.0000 0.949   0.001 ***\n2676 1.0000 0.9000 0.949   0.001 ***\n4402 1.0000 0.9000 0.949   0.001 ***\n285  0.8987 1.0000 0.948   0.001 ***\n28   0.8984 1.0000 0.948   0.001 ***\n2099 0.8951 1.0000 0.946   0.001 ***\n3843 0.8951 1.0000 0.946   0.001 ***\n275  0.8947 1.0000 0.946   0.001 ***\n670  0.8927 1.0000 0.945   0.001 ***\n456  0.8921 1.0000 0.945   0.001 ***\n307  0.8915 1.0000 0.944   0.001 ***\n1521 0.8900 1.0000 0.943   0.001 ***\n1705 0.8881 1.0000 0.942   0.001 ***\n820  0.8860 1.0000 0.941   0.001 ***\n288  0.8848 1.0000 0.941   0.001 ***\n1532 0.8842 1.0000 0.940   0.001 ***\n1518 0.8837 1.0000 0.940   0.001 ***\n891  0.8837 1.0000 0.940   0.001 ***\n42   0.8831 1.0000 0.940   0.001 ***\n2076 0.8829 1.0000 0.940   0.001 ***\n2533 0.9799 0.9000 0.939   0.001 ***\n171  0.8816 1.0000 0.939   0.001 ***\n61   0.8810 1.0000 0.939   0.001 ***\n230  0.9785 0.9000 0.938   0.001 ***\n575  0.8803 1.0000 0.938   0.001 ***\n786  0.8799 1.0000 0.938   0.001 ***\n25   0.8798 1.0000 0.938   0.001 ***\n723  0.9770 0.9000 0.938   0.001 ***\n289  0.8791 1.0000 0.938   0.001 ***\n1247 0.8789 1.0000 0.937   0.001 ***\n1906 0.9761 0.9000 0.937   0.001 ***\n1076 0.8780 1.0000 0.937   0.001 ***\n1723 0.8780 1.0000 0.937   0.001 ***\n2522 0.8760 1.0000 0.936   0.001 ***\n551  0.8760 1.0000 0.936   0.001 ***\n594  0.8745 1.0000 0.935   0.001 ***\n18   0.8736 1.0000 0.935   0.001 ***\n1894 0.9704 0.9000 0.935   0.001 ***\n3029 0.8731 1.0000 0.934   0.001 ***\n1796 0.9697 0.9000 0.934   0.001 ***\n209  0.8725 1.0000 0.934   0.001 ***\n684  0.8718 1.0000 0.934   0.001 ***\n2644 0.8718 1.0000 0.934   0.001 ***\n250  0.8715 1.0000 0.934   0.001 ***\n104  0.9647 0.9000 0.932   0.001 ***\n197  0.8675 1.0000 0.931   0.001 ***\n1472 0.8673 1.0000 0.931   0.001 ***\n2730 0.9612 0.9000 0.930   0.001 ***\n4198 0.9600 0.9000 0.930   0.001 ***\n123  0.8631 1.0000 0.929   0.001 ***\n1008 0.8629 1.0000 0.929   0.001 ***\n2112 0.9574 0.9000 0.928   0.001 ***\n110  0.8604 1.0000 0.928   0.001 ***\n2822 0.9558 0.9000 0.927   0.001 ***\n3068 0.8571 1.0000 0.926   0.001 ***\n2650 0.8571 1.0000 0.926   0.001 ***\n1874 0.8562 1.0000 0.925   0.001 ***\n674  0.9505 0.9000 0.925   0.001 ***\n4818 0.9505 0.9000 0.925   0.001 ***\n22   0.8540 1.0000 0.924   0.001 ***\n76   0.8535 1.0000 0.924   0.001 ***\n24   0.8531 1.0000 0.924   0.001 ***\n3277 0.8529 1.0000 0.924   0.001 ***\n1484 0.9474 0.9000 0.923   0.001 ***\n1790 0.9470 0.9000 0.923   0.001 ***\n686  0.9470 0.9000 0.923   0.001 ***\n3589 0.9462 0.9000 0.923   0.001 ***\n5090 0.9462 0.9000 0.923   0.001 ***\n4719 0.9438 0.9000 0.922   0.001 ***\n3321 0.9438 0.9000 0.922   0.001 ***\n3987 0.9438 0.9000 0.922   0.001 ***\n1930 0.9433 0.9000 0.921   0.001 ***\n581  0.9432 0.9000 0.921   0.001 ***\n2335 0.8485 1.0000 0.921   0.001 ***\n1956 0.8485 1.0000 0.921   0.001 ***\n1187 0.9425 0.9000 0.921   0.001 ***\n779  0.9412 0.9000 0.920   0.001 ***\n1195 0.8469 1.0000 0.920   0.001 ***\n43   0.8466 1.0000 0.920   0.001 ***\n1043 0.8464 1.0000 0.920   0.001 ***\n233  0.8458 1.0000 0.920   0.001 ***\n1957 0.8450 1.0000 0.919   0.001 ***\n2057 0.9383 0.9000 0.919   0.001 ***\n2135 0.9383 0.9000 0.919   0.001 ***\n2384 0.9383 0.9000 0.919   0.001 ***\n2512 0.9383 0.9000 0.919   0.001 ***\n185  0.8421 1.0000 0.918   0.001 ***\n82   0.8418 1.0000 0.917   0.001 ***\n2949 0.9351 0.9000 0.917   0.001 ***\n1410 0.9351 0.9000 0.917   0.001 ***\n555  0.9351 0.9000 0.917   0.001 ***\n517  0.9342 0.9000 0.917   0.001 ***\n1513 0.8395 1.0000 0.916   0.001 ***\n5195 0.9315 0.9000 0.916   0.001 ***\n172  0.8373 1.0000 0.915   0.001 ***\n745  0.8371 1.0000 0.915   0.001 ***\n152  0.8359 1.0000 0.914   0.001 ***\n1225 0.9275 0.9000 0.914   0.001 ***\n3592 0.9275 0.9000 0.914   0.001 ***\n325  0.8338 1.0000 0.913   0.001 ***\n329  0.8333 1.0000 0.913   0.001 ***\n2503 0.8327 1.0000 0.913   0.001 ***\n836  0.8322 1.0000 0.912   0.001 ***\n536  0.8310 1.0000 0.912   0.001 ***\n905  0.8302 1.0000 0.911   0.001 ***\n1571 0.9219 0.9000 0.911   0.001 ***\n2797 0.9219 0.9000 0.911   0.001 ***\n2170 0.8281 1.0000 0.910   0.001 ***\n825  0.8276 1.0000 0.910   0.001 ***\n267  0.8276 1.0000 0.910   0.001 ***\n3459 0.8276 1.0000 0.910   0.001 ***\n410  0.9192 0.9000 0.910   0.001 ***\n647  0.8269 1.0000 0.909   0.001 ***\n258  0.8264 1.0000 0.909   0.001 ***\n562  0.8263 1.0000 0.909   0.001 ***\n3613 0.9180 0.9000 0.909   0.001 ***\n822  0.8259 1.0000 0.909   0.001 ***\n773  0.8255 1.0000 0.909   0.001 ***\n3081 0.9153 0.9000 0.908   0.001 ***\n624  0.8235 1.0000 0.907   0.001 ***\n621  0.8232 1.0000 0.907   0.001 ***\n166  0.8226 1.0000 0.907   0.001 ***\n437  0.9134 0.9000 0.907   0.001 ***\n1279 0.8214 1.0000 0.906   0.001 ***\n1955 0.9123 0.9000 0.906   0.001 ***\n1402 0.9123 0.9000 0.906   0.001 ***\n872  0.9123 0.9000 0.906   0.001 ***\n1467 0.9123 0.9000 0.906   0.001 ***\n2695 0.9123 0.9000 0.906   0.001 ***\n4829 0.9123 0.9000 0.906   0.001 ***\n529  0.8209 1.0000 0.906   0.001 ***\n963  0.8201 1.0000 0.906   0.001 ***\n2666 0.9107 0.9000 0.905   0.001 ***\n280  0.8191 1.0000 0.905   0.001 ***\n4991 0.8190 1.0000 0.905   0.001 ***\n1286 0.8188 1.0000 0.905   0.001 ***\n835  0.8185 1.0000 0.905   0.001 ***\n1365 0.9091 0.9000 0.905   0.001 ***\n3030 0.8182 1.0000 0.905   0.001 ***\n449  0.9080 0.9000 0.904   0.001 ***\n369  0.8164 1.0000 0.904   0.001 ***\n1229 0.9069 0.9000 0.903   0.001 ***\n719  0.8134 1.0000 0.902   0.001 ***\n340  0.8133 1.0000 0.902   0.001 ***\n505  0.9032 0.9000 0.902   0.001 ***\n1854 0.9020 0.9000 0.901   0.001 ***\n1159 0.8110 1.0000 0.901   0.001 ***\n34   0.8099 1.0000 0.900   0.001 ***\n1575 0.8094 1.0000 0.900   0.001 ***\n1681 0.8980 0.9000 0.899   0.001 ***\n2308 0.8963 0.9000 0.898   0.001 ***\n815  0.8951 0.9000 0.898   0.001 ***\n256  0.8054 1.0000 0.897   0.001 ***\n2546 0.8921 0.9000 0.896   0.001 ***\n118  0.8026 1.0000 0.896   0.001 ***\n177  0.8023 1.0000 0.896   0.001 ***\n652  0.8889 0.9000 0.894   0.001 ***\n977  1.0000 0.8000 0.894   0.001 ***\n2802 1.0000 0.8000 0.894   0.001 ***\n2963 1.0000 0.8000 0.894   0.001 ***\n3470 1.0000 0.8000 0.894   0.001 ***\n2622 1.0000 0.8000 0.894   0.001 ***\n2566 1.0000 0.8000 0.894   0.001 ***\n5282 1.0000 0.8000 0.894   0.001 ***\n761  1.0000 0.8000 0.894   0.001 ***\n590  1.0000 0.8000 0.894   0.001 ***\n958  1.0000 0.8000 0.894   0.001 ***\n5345 1.0000 0.8000 0.894   0.001 ***\n5212 1.0000 0.8000 0.894   0.001 ***\n1973 1.0000 0.8000 0.894   0.001 ***\n339  1.0000 0.8000 0.894   0.001 ***\n1288 1.0000 0.8000 0.894   0.001 ***\n572  1.0000 0.8000 0.894   0.001 ***\n2183 1.0000 0.8000 0.894   0.001 ***\n2278 0.8000 1.0000 0.894   0.001 ***\n4405 1.0000 0.8000 0.894   0.001 ***\n5749 1.0000 0.8000 0.894   0.001 ***\n8080 1.0000 0.8000 0.894   0.001 ***\n680  0.7978 1.0000 0.893   0.001 ***\n3441 0.8837 0.9000 0.892   0.001 ***\n3719 0.8837 0.9000 0.892   0.001 ***\n1144 0.8807 0.9000 0.890   0.001 ***\n651  0.8780 0.9000 0.889   0.001 ***\n4461 0.8780 0.9000 0.889   0.001 ***\n300  0.9861 0.8000 0.888   0.001 ***\n2492 0.8739 0.9000 0.887   0.001 ***\n1888 0.7863 1.0000 0.887   0.001 ***\n2082 0.8731 0.9000 0.886   0.001 ***\n618  0.9814 0.8000 0.886   0.001 ***\n3591 0.8696 0.9000 0.885   0.001 ***\n84   0.7820 1.0000 0.884   0.001 ***\n3064 0.8684 0.9000 0.884   0.001 ***\n645  0.8667 0.9000 0.883   0.001 ***\n2351 0.7794 1.0000 0.883   0.001 ***\n1074 0.9735 0.8000 0.883   0.001 ***\n1618 0.7788 1.0000 0.882   0.001 ***\n2024 0.8649 0.9000 0.882   0.001 ***\n2151 0.8649 0.9000 0.882   0.001 ***\n1873 0.8649 0.9000 0.882   0.001 ***\n1753 0.8649 0.9000 0.882   0.001 ***\n3432 0.8649 0.9000 0.882   0.001 ***\n1966 0.8649 0.9000 0.882   0.001 ***\n373  0.8647 0.9000 0.882   0.001 ***\n3738 0.8644 0.9000 0.882   0.001 ***\n311  0.9711 0.8000 0.881   0.001 ***\n8    0.7761 1.0000 0.881   0.001 ***\n1800 0.8606 0.9000 0.880   0.001 ***\n3572 0.7742 1.0000 0.880   0.001 ***\n715  0.7727 1.0000 0.879   0.001 ***\n2315 0.8583 0.9000 0.879   0.001 ***\n1204 0.8579 0.9000 0.879   0.001 ***\n659  0.7701 1.0000 0.878   0.001 ***\n3997 0.9612 0.8000 0.877   0.001 ***\n367  0.7681 1.0000 0.876   0.001 ***\n1868 0.9587 0.8000 0.876   0.001 ***\n1611 0.7666 1.0000 0.876   0.001 ***\n23   0.8517 0.9000 0.875   0.001 ***\n930  0.7656 1.0000 0.875   0.001 ***\n4743 0.9558 0.8000 0.874   0.001 ***\n2237 0.8485 0.9000 0.874   0.001 ***\n809  0.9541 0.8000 0.874   0.001 ***\n3577 0.8471 0.9000 0.873   0.001 ***\n2355 0.8462 0.9000 0.873   0.001 ***\n264  0.8456 0.9000 0.872   0.001 ***\n2630 0.9505 0.8000 0.872   0.001 ***\n3560 0.8447 0.9000 0.872   0.001 ***\n2211 0.8438 0.9000 0.871   0.001 ***\n1706 0.8438 0.9000 0.871   0.001 ***\n1768 0.8428 0.9000 0.871   0.001 ***\n1023 0.8421 0.9000 0.871   0.001 ***\n356  0.9462 0.8000 0.870   0.001 ***\n4641 0.7564 1.0000 0.870   0.001 ***\n2640 0.8402 0.9000 0.870   0.001 ***\n225  0.8391 0.9000 0.869   0.001 ***\n2322 0.9438 0.8000 0.869   0.001 ***\n2569 0.8387 0.9000 0.869   0.001 ***\n988  0.8387 0.9000 0.869   0.001 ***\n86   0.8387 0.9000 0.869   0.001 ***\n3426 0.8387 0.9000 0.869   0.001 ***\n563  0.8372 0.9000 0.868   0.001 ***\n5083 0.9412 0.8000 0.868   0.001 ***\n2910 0.7522 1.0000 0.867   0.001 ***\n2736 0.8344 0.9000 0.867   0.001 ***\n5402 0.9383 0.8000 0.866   0.001 ***\n475  0.9383 0.8000 0.866   0.001 ***\n2467 0.8333 0.9000 0.866   0.001 ***\n3495 0.7500 1.0000 0.866   0.001 ***\n2732 0.9367 0.8000 0.866   0.001 ***\n2586 0.8322 0.9000 0.865   0.001 ***\n1824 0.8315 0.9000 0.865   0.001 ***\n1027 0.9351 0.8000 0.865   0.001 ***\n904  0.9351 0.8000 0.865   0.001 ***\n390  0.7478 1.0000 0.865   0.001 ***\n1445 0.7471 1.0000 0.864   0.001 ***\n2496 0.7469 1.0000 0.864   0.001 ***\n3564 0.9315 0.8000 0.863   0.001 ***\n406  0.8276 0.9000 0.863   0.001 ***\n1271 0.7444 1.0000 0.863   0.001 ***\n1968 0.8251 0.9000 0.862   0.001 ***\n1621 0.9275 0.8000 0.861   0.001 ***\n704  0.9275 0.8000 0.861   0.001 ***\n1238 0.9265 0.8000 0.861   0.001 ***\n359  0.9263 0.8000 0.861   0.001 ***\n1549 0.9254 0.8000 0.860   0.001 ***\n3545 0.8214 0.9000 0.860   0.001 ***\n4016 0.9231 0.8000 0.859   0.001 ***\n3312 0.9231 0.8000 0.859   0.001 ***\n1040 0.9215 0.8000 0.859   0.001 ***\n2587 0.9215 0.8000 0.859   0.001 ***\n3121 0.9206 0.8000 0.858   0.001 ***\n1596 0.9180 0.8000 0.857   0.001 ***\n2888 0.9180 0.8000 0.857   0.001 ***\n3287 0.8148 0.9000 0.856   0.001 ***\n3867 0.8148 0.9000 0.856   0.001 ***\n1915 0.9153 0.8000 0.856   0.001 ***\n2841 0.9143 0.8000 0.855   0.001 ***\n4044 0.9123 0.8000 0.854   0.001 ***\n6181 0.9123 0.8000 0.854   0.001 ***\n471  0.9102 0.8000 0.853   0.001 ***\n7488 0.8090 0.9000 0.853   0.001 ***\n1832 0.8084 0.9000 0.853   0.001 ***\n3516 0.9088 0.8000 0.853   0.001 ***\n4407 0.8077 0.9000 0.853   0.001 ***\n2988 0.8077 0.9000 0.853   0.001 ***\n2042 0.8062 0.9000 0.852   0.001 ***\n993  0.8052 0.9000 0.851   0.001 ***\n2770 0.9057 0.8000 0.851   0.001 ***\n5665 0.9057 0.8000 0.851   0.001 ***\n8044 0.9057 0.8000 0.851   0.001 ***\n805  0.8039 0.9000 0.851   0.001 ***\n2433 0.9031 0.8000 0.850   0.001 ***\n4019 0.9020 0.8000 0.849   0.001 ***\n886  0.8000 0.9000 0.849   0.001 ***\n1030 0.8000 0.9000 0.849   0.001 ***\n2093 0.8000 0.9000 0.849   0.001 ***\n2948 0.8980 0.8000 0.848   0.001 ***\n343  0.7955 0.9000 0.846   0.001 ***\n512  0.7158 1.0000 0.846   0.001 ***\n3097 0.7156 1.0000 0.846   0.001 ***\n3871 0.8936 0.8000 0.846   0.001 ***\n90   0.7941 0.9000 0.845   0.001 ***\n3223 0.8921 0.8000 0.845   0.001 ***\n1373 0.8921 0.8000 0.845   0.001 ***\n1107 0.7910 0.9000 0.844   0.001 ***\n3712 0.7904 0.9000 0.843   0.001 ***\n5050 0.8889 0.8000 0.843   0.001 ***\n3150 0.8889 0.8000 0.843   0.001 ***\n5081 0.8889 0.8000 0.843   0.001 ***\n4668 0.8889 0.8000 0.843   0.001 ***\n1042 0.7107 1.0000 0.843   0.001 ***\n453  0.7887 0.9000 0.843   0.001 ***\n818  0.7863 0.9000 0.841   0.001 ***\n3515 0.8837 0.8000 0.841   0.001 ***\n947  0.7853 0.9000 0.841   0.001 ***\n1202 0.8826 0.8000 0.840   0.001 ***\n2152 0.7059 1.0000 0.840   0.001 ***\n2102 0.8819 0.8000 0.840   0.001 ***\n1807 0.8819 0.8000 0.840   0.001 ***\n430  0.7053 1.0000 0.840   0.001 ***\n3078 0.7826 0.9000 0.839   0.001 ***\n5885 0.8780 0.8000 0.838   0.001 ***\n1817 0.8780 0.8000 0.838   0.001 ***\n2906 0.8750 0.8000 0.837   0.001 ***\n2893 1.0000 0.7000 0.837   0.001 ***\n5650 1.0000 0.7000 0.837   0.001 ***\n3727 1.0000 0.7000 0.837   0.001 ***\n6251 1.0000 0.7000 0.837   0.001 ***\n8097 1.0000 0.7000 0.837   0.001 ***\n4170 1.0000 0.7000 0.837   0.001 ***\n2464 1.0000 0.7000 0.837   0.001 ***\n928  1.0000 0.7000 0.837   0.001 ***\n1140 1.0000 0.7000 0.837   0.001 ***\n889  1.0000 0.7000 0.837   0.001 ***\n2547 1.0000 0.7000 0.837   0.001 ***\n743  1.0000 0.7000 0.837   0.001 ***\n1193 1.0000 0.7000 0.837   0.001 ***\n2186 1.0000 0.7000 0.837   0.001 ***\n2262 1.0000 0.7000 0.837   0.001 ***\n2629 1.0000 0.7000 0.837   0.001 ***\n2413 1.0000 0.7000 0.837   0.001 ***\n2425 1.0000 0.7000 0.837   0.001 ***\n7124 1.0000 0.7000 0.837   0.001 ***\n3219 1.0000 0.7000 0.837   0.001 ***\n5286 1.0000 0.7000 0.837   0.001 ***\n2986 1.0000 0.7000 0.837   0.001 ***\n2725 1.0000 0.7000 0.837   0.001 ***\n6046 1.0000 0.7000 0.837   0.001 ***\n5600 1.0000 0.7000 0.837   0.001 ***\n6942 1.0000 0.7000 0.837   0.001 ***\n3551 1.0000 0.7000 0.837   0.001 ***\n1736 0.7773 0.9000 0.836   0.001 ***\n2653 0.7766 0.9000 0.836   0.001 ***\n2450 0.8696 0.8000 0.834   0.001 ***\n381  0.6948 1.0000 0.834   0.001 ***\n2816 0.7706 0.9000 0.833   0.001 ***\n3984 0.7706 0.9000 0.833   0.001 ***\n1383 0.8649 0.8000 0.832   0.001 ***\n1426 0.7674 0.9000 0.831   0.001 ***\n1924 0.8619 0.8000 0.830   0.001 ***\n2393 0.7655 0.9000 0.830   0.001 ***\n2922 0.8611 0.8000 0.830   0.001 ***\n794  0.7645 0.9000 0.830   0.001 ***\n1799 0.7644 0.9000 0.829   0.001 ***\n671  0.7632 0.9000 0.829   0.001 ***\n1155 0.7631 0.9000 0.829   0.001 ***\n2414 0.8581 0.8000 0.829   0.001 ***\n2301 0.7619 0.9000 0.828   0.001 ***\n4969 0.8571 0.8000 0.828   0.001 ***\n6350 0.7619 0.9000 0.828   0.001 ***\n4559 0.8557 0.8000 0.827   0.001 ***\n561  0.8544 0.8000 0.827   0.001 ***\n1492 0.9761 0.7000 0.827   0.001 ***\n3972 0.7582 0.9000 0.826   0.001 ***\n4011 0.6809 1.0000 0.825   0.001 ***\n239  0.7562 0.9000 0.825   0.001 ***\n439  0.8485 0.8000 0.824   0.001 ***\n1000 0.8485 0.8000 0.824   0.001 ***\n2946 0.8485 0.8000 0.824   0.001 ***\n6094 0.8485 0.8000 0.824   0.001 ***\n3302 0.8463 0.8000 0.823   0.001 ***\n602  0.6753 1.0000 0.822   0.001 ***\n2594 0.8423 0.8000 0.821   0.001 ***\n649  0.7487 0.9000 0.821   0.001 ***\n3421 0.8421 0.8000 0.821   0.001 ***\n2632 0.7475 0.9000 0.820   0.001 ***\n1281 0.8408 0.8000 0.820   0.001 ***\n1250 0.8387 0.8000 0.819   0.001 ***\n806  0.9573 0.7000 0.819   0.001 ***\n1699 0.8366 0.8000 0.818   0.001 ***\n1720 0.8366 0.8000 0.818   0.001 ***\n2833 0.7436 0.9000 0.818   0.001 ***\n1201 0.8352 0.8000 0.817   0.001 ***\n2063 0.7423 0.9000 0.817   0.001 ***\n2856 0.7416 0.9000 0.817   0.001 ***\n322  0.8338 0.8000 0.817   0.001 ***\n3527 0.9524 0.7000 0.816   0.001 ***\n3379 0.8333 0.8000 0.816   0.001 ***\n1692 0.8329 0.8000 0.816   0.001 ***\n4086 0.9505 0.7000 0.816   0.001 ***\n2615 0.8309 0.8000 0.815   0.001 ***\n744  0.9485 0.7000 0.815   0.001 ***\n579  0.8299 0.8000 0.815   0.001 ***\n2286 0.9462 0.7000 0.814   0.001 ***\n1560 0.8276 0.8000 0.814   0.001 ***\n1778 0.8276 0.8000 0.814   0.001 ***\n3540 0.8276 0.8000 0.814   0.001 ***\n702  0.9412 0.7000 0.812   0.001 ***\n2595 0.8227 0.8000 0.811   0.001 ***\n2087 0.9383 0.7000 0.810   0.001 ***\n1115 0.9383 0.7000 0.810   0.001 ***\n2619 0.8208 0.8000 0.810   0.001 ***\n3061 0.8193 0.8000 0.810   0.001 ***\n4784 0.9351 0.7000 0.809   0.001 ***\n2421 0.8168 0.8000 0.808   0.001 ***\n1143 0.8120 0.8000 0.806   0.001 ***\n3926 0.9275 0.7000 0.806   0.001 ***\n2945 0.9275 0.7000 0.806   0.001 ***\n4436 0.9275 0.7000 0.806   0.001 ***\n1914 0.9275 0.7000 0.806   0.001 ***\n2059 0.7208 0.9000 0.805   0.001 ***\n3351 0.8077 0.8000 0.804   0.001 ***\n1447 0.9231 0.7000 0.804   0.001 ***\n738  0.9215 0.7000 0.803   0.001 ***\n1470 0.8052 0.8000 0.803   0.001 ***\n242  0.8045 0.8000 0.802   0.001 ***\n4196 0.8045 0.8000 0.802   0.001 ***\n1735 0.8036 0.8000 0.802   0.001 ***\n2216 0.9180 0.7000 0.802   0.001 ***\n3910 0.9180 0.7000 0.802   0.001 ***\n3095 0.9180 0.7000 0.802   0.001 ***\n1595 0.9153 0.7000 0.800   0.001 ***\n1990 0.8000 0.8000 0.800   0.001 ***\n500  0.9123 0.7000 0.799   0.001 ***\n4778 0.9123 0.7000 0.799   0.001 ***\n2346 0.9102 0.7000 0.798   0.001 ***\n1918 0.9074 0.7000 0.797   0.001 ***\n4791 0.7917 0.8000 0.796   0.001 ***\n3218 0.9020 0.7000 0.795   0.001 ***\n4491 0.7887 0.8000 0.794   0.001 ***\n4880 0.7887 0.8000 0.794   0.001 ***\n2600 0.7006 0.9000 0.794   0.001 ***\n1019 0.8989 0.7000 0.793   0.001 ***\n546  0.7859 0.8000 0.793   0.001 ***\n3620 0.8980 0.7000 0.793   0.001 ***\n4667 0.8980 0.7000 0.793   0.001 ***\n5192 0.8980 0.7000 0.793   0.001 ***\n5332 0.8980 0.7000 0.793   0.001 ***\n3607 0.8936 0.7000 0.791   0.001 ***\n3160 0.7788 0.8000 0.789   0.001 ***\n6392 0.7761 0.8000 0.788   0.001 ***\n6847 0.7756 0.8000 0.788   0.001 ***\n795  0.7752 0.8000 0.787   0.001 ***\n769  0.8848 0.7000 0.787   0.001 ***\n1837 0.8780 0.7000 0.784   0.001 ***\n7544 0.8780 0.7000 0.784   0.001 ***\n8054 0.8780 0.7000 0.784   0.001 ***\n3377 0.7660 0.8000 0.783   0.001 ***\n2804 0.8718 0.7000 0.781   0.001 ***\n3332 0.7619 0.8000 0.781   0.001 ***\n5455 0.7619 0.8000 0.781   0.001 ***\n3520 0.7619 0.8000 0.781   0.001 ***\n2572 0.8696 0.7000 0.780   0.001 ***\n1034 0.8649 0.7000 0.778   0.001 ***\n4027 0.8649 0.7000 0.778   0.001 ***\n3979 0.8598 0.7000 0.776   0.001 ***\n7107 1.0000 0.6000 0.775   0.001 ***\n4521 1.0000 0.6000 0.775   0.001 ***\n965  1.0000 0.6000 0.775   0.001 ***\n5718 1.0000 0.6000 0.775   0.001 ***\n7724 1.0000 0.6000 0.775   0.001 ***\n2058 1.0000 0.6000 0.775   0.001 ***\n4246 1.0000 0.6000 0.775   0.001 ***\n7142 1.0000 0.6000 0.775   0.001 ***\n6635 1.0000 0.6000 0.775   0.001 ***\n3956 1.0000 0.6000 0.775   0.001 ***\n1690 1.0000 0.6000 0.775   0.001 ***\n480  1.0000 0.6000 0.775   0.001 ***\n2859 1.0000 0.6000 0.775   0.001 ***\n613  0.8571 0.7000 0.775   0.001 ***\n2790 1.0000 0.6000 0.775   0.001 ***\n636  1.0000 0.6000 0.775   0.001 ***\n960  0.6667 0.9000 0.775   0.001 ***\n2473 1.0000 0.6000 0.775   0.001 ***\n2931 1.0000 0.6000 0.775   0.001 ***\n1011 1.0000 0.6000 0.775   0.001 ***\n3143 1.0000 0.6000 0.775   0.001 ***\n4120 1.0000 0.6000 0.775   0.001 ***\n6329 1.0000 0.6000 0.775   0.001 ***\n1094 1.0000 0.6000 0.775   0.001 ***\n2429 1.0000 0.6000 0.775   0.001 ***\n914  1.0000 0.6000 0.775   0.001 ***\n4543 1.0000 0.6000 0.775   0.001 ***\n2683 1.0000 0.6000 0.775   0.001 ***\n3659 1.0000 0.6000 0.775   0.001 ***\n4697 1.0000 0.6000 0.775   0.001 ***\n4445 1.0000 0.6000 0.775   0.001 ***\n2783 1.0000 0.6000 0.775   0.001 ***\n5109 1.0000 0.6000 0.775   0.001 ***\n1964 1.0000 0.6000 0.775   0.001 ***\n5634 1.0000 0.6000 0.775   0.001 ***\n4358 1.0000 0.6000 0.775   0.001 ***\n5637 1.0000 0.6000 0.775   0.001 ***\n2062 1.0000 0.6000 0.775   0.001 ***\n7693 1.0000 0.6000 0.775   0.001 ***\n6665 1.0000 0.6000 0.775   0.001 ***\n6498 1.0000 0.6000 0.775   0.001 ***\n777  1.0000 0.6000 0.775   0.001 ***\n4686 1.0000 0.6000 0.775   0.001 ***\n4176 1.0000 0.6000 0.775   0.001 ***\n7149 1.0000 0.6000 0.775   0.001 ***\n7452 1.0000 0.6000 0.775   0.001 ***\n6175 1.0000 0.6000 0.775   0.001 ***\n5276 1.0000 0.6000 0.775   0.001 ***\n7773 1.0000 0.6000 0.775   0.001 ***\n6917 1.0000 0.6000 0.775   0.001 ***\n6307 1.0000 0.6000 0.775   0.001 ***\n7035 1.0000 0.6000 0.775   0.001 ***\n7578 1.0000 0.6000 0.775   0.001 ***\n8048 1.0000 0.6000 0.775   0.001 ***\n7328 1.0000 0.6000 0.775   0.001 ***\n7630 1.0000 0.6000 0.775   0.001 ***\n2825 0.8544 0.7000 0.773   0.001 ***\n4494 0.8485 0.7000 0.771   0.001 ***\n2131 0.8485 0.7000 0.771   0.001 ***\n5557 0.8485 0.7000 0.771   0.001 ***\n7249 0.8463 0.7000 0.770   0.001 ***\n6710 0.8463 0.7000 0.770   0.001 ***\n4339 0.8421 0.7000 0.768   0.001 ***\n4713 0.7368 0.8000 0.768   0.001 ***\n7288 0.8387 0.7000 0.766   0.001 ***\n1876 0.8366 0.7000 0.765   0.001 ***\n2020 0.8352 0.7000 0.765   0.001 ***\n7086 0.8276 0.7000 0.761   0.001 ***\n4836 0.8248 0.7000 0.760   0.001 ***\n1135 0.9541 0.6000 0.757   0.001 ***\n4776 0.8148 0.7000 0.755   0.001 ***\n4579 0.8101 0.7000 0.753   0.001 ***\n3813 0.9387 0.6000 0.750   0.001 ***\n2126 0.9383 0.6000 0.750   0.001 ***\n2249 0.8000 0.7000 0.748   0.001 ***\n5739 0.9231 0.6000 0.744   0.001 ***\n2083 0.9123 0.6000 0.740   0.001 ***\n5707 0.9020 0.6000 0.736   0.001 ***\n6729 0.9000 0.6000 0.735   0.001 ***\n7956 0.8980 0.6000 0.734   0.001 ***\n2154 0.8980 0.6000 0.734   0.001 ***\n2094 0.8980 0.6000 0.734   0.001 ***\n7808 0.8980 0.6000 0.734   0.001 ***\n8694 0.8980 0.6000 0.734   0.001 ***\n3054 0.8901 0.6000 0.731   0.001 ***\n4712 0.8889 0.6000 0.730   0.001 ***\n4984 0.7619 0.7000 0.730   0.001 ***\n1127 0.7619 0.7000 0.730   0.001 ***\n4694 0.8780 0.6000 0.726   0.001 ***\n3941 0.8780 0.6000 0.726   0.001 ***\n2656 0.8780 0.6000 0.726   0.001 ***\n2163 0.8780 0.6000 0.726   0.001 ***\n7735 0.8780 0.6000 0.726   0.001 ***\n6797 0.8780 0.6000 0.726   0.001 ***\n5869 0.8649 0.6000 0.720   0.001 ***\n5911 0.8649 0.6000 0.720   0.001 ***\n7565 0.8485 0.6000 0.714   0.001 ***\n5892 1.0000 0.5000 0.707   0.001 ***\n3075 1.0000 0.5000 0.707   0.001 ***\n6819 1.0000 0.5000 0.707   0.001 ***\n4122 1.0000 0.5000 0.707   0.001 ***\n3367 1.0000 0.5000 0.707   0.001 ***\n4580 1.0000 0.5000 0.707   0.001 ***\n7540 1.0000 0.5000 0.707   0.001 ***\n7010 1.0000 0.5000 0.707   0.001 ***\n9283 1.0000 0.5000 0.707   0.001 ***\n8873 1.0000 0.5000 0.707   0.001 ***\n6739 0.8000 0.6000 0.693   0.001 ***\n6867 0.8000 0.6000 0.693   0.001 ***\n\n Group 27  #sps.  22 \n           A      B  stat p.value    \n2767  0.8797 1.0000 0.938   0.001 ***\n1046  0.8191 1.0000 0.905   0.001 ***\n857   0.8004 1.0000 0.895   0.001 ***\n3294  0.7978 1.0000 0.893   0.001 ***\n5504  1.0000 0.7500 0.866   0.001 ***\n708   0.8404 0.8750 0.858   0.001 ***\n1947  0.8182 0.8750 0.846   0.001 ***\n1075  0.8110 0.8750 0.842   0.001 ***\n4474  0.8088 0.8750 0.841   0.001 ***\n3493  0.9000 0.7500 0.822   0.001 ***\n6937  0.8710 0.7500 0.808   0.001 ***\n3185  0.8534 0.7500 0.800   0.001 ***\n12945 0.7226 0.8750 0.795   0.001 ***\n15801 0.7152 0.8750 0.791   0.001 ***\n5265  0.8333 0.7500 0.791   0.001 ***\n7831  1.0000 0.6250 0.791   0.001 ***\n4452  1.0000 0.6250 0.791   0.001 ***\n4673  1.0000 0.6250 0.791   0.001 ***\n3569  0.8005 0.7500 0.775   0.001 ***\n4117  0.9310 0.6250 0.763   0.001 ***\n8830  0.7714 0.7500 0.761   0.001 ***\n7665  0.8090 0.6250 0.711   0.001 ***\n\n Group 6+13  #sps.  19 \n           A      B  stat p.value    \n2950  0.8693 1.0000 0.932   0.001 ***\n2753  0.9426 0.8824 0.912   0.001 ***\n4051  0.9331 0.8824 0.907   0.001 ***\n7992  0.9239 0.8824 0.903   0.001 ***\n3689  0.9020 0.8824 0.892   0.001 ***\n12437 0.9528 0.8235 0.886   0.001 ***\n2095  0.9099 0.8235 0.866   0.001 ***\n14275 0.9047 0.8235 0.863   0.001 ***\n4428  0.9628 0.7647 0.858   0.001 ***\n16814 0.9355 0.7647 0.846   0.001 ***\n4502  1.0000 0.7059 0.840   0.001 ***\n3617  0.9227 0.7647 0.840   0.001 ***\n3245  0.9224 0.7647 0.840   0.001 ***\n15530 0.9184 0.7647 0.838   0.001 ***\n5509  0.9764 0.7059 0.830   0.001 ***\n15207 0.9381 0.7059 0.814   0.001 ***\n10976 0.9597 0.6471 0.788   0.001 ***\n7203  0.9430 0.6471 0.781   0.001 ***\n18375 0.9109 0.5882 0.732   0.001 ***\n\n Group 6+20  #sps.  154 \n          A      B  stat p.value    \n894  1.0000 1.0000 1.000   0.001 ***\n232  1.0000 1.0000 1.000   0.001 ***\n49   0.9989 1.0000 0.999   0.001 ***\n389  0.9973 1.0000 0.999   0.001 ***\n159  0.9947 1.0000 0.997   0.001 ***\n78   0.9946 1.0000 0.997   0.001 ***\n693  0.9922 1.0000 0.996   0.001 ***\n80   0.9912 1.0000 0.996   0.001 ***\n426  0.9854 1.0000 0.993   0.001 ***\n234  0.9831 1.0000 0.992   0.001 ***\n150  0.9714 1.0000 0.986   0.001 ***\n349  0.9668 1.0000 0.983   0.001 ***\n829  0.9538 1.0000 0.977   0.001 ***\n427  0.9516 1.0000 0.976   0.001 ***\n251  0.9461 1.0000 0.973   0.001 ***\n690  1.0000 0.9444 0.972   0.001 ***\n776  1.0000 0.9444 0.972   0.001 ***\n1345 0.9908 0.9444 0.967   0.001 ***\n461  0.9347 1.0000 0.967   0.001 ***\n755  0.9829 0.9444 0.963   0.001 ***\n619  0.9826 0.9444 0.963   0.001 ***\n908  0.9169 1.0000 0.958   0.001 ***\n241  0.9121 1.0000 0.955   0.001 ***\n1792 0.9647 0.9444 0.955   0.001 ***\n200  0.9600 0.9444 0.952   0.001 ***\n294  0.9576 0.9444 0.951   0.001 ***\n445  0.9547 0.9444 0.950   0.001 ***\n1010 0.9533 0.9444 0.949   0.001 ***\n519  0.9450 0.9444 0.945   0.001 ***\n1305 1.0000 0.8889 0.943   0.001 ***\n4526 1.0000 0.8889 0.943   0.001 ***\n1105 0.9947 0.8889 0.940   0.001 ***\n1211 0.9356 0.9444 0.940   0.001 ***\n2498 0.9352 0.9444 0.940   0.001 ***\n149  0.9896 0.8889 0.938   0.001 ***\n1257 0.9296 0.9444 0.937   0.001 ***\n1255 0.9871 0.8889 0.937   0.001 ***\n3639 0.8759 1.0000 0.936   0.001 ***\n3001 0.9849 0.8889 0.936   0.001 ***\n689  0.9832 0.8889 0.935   0.001 ***\n131  0.9778 0.8889 0.932   0.001 ***\n1080 0.9153 0.9444 0.930   0.001 ***\n710  0.9710 0.8889 0.929   0.001 ***\n122  0.9683 0.8889 0.928   0.001 ***\n1378 0.9649 0.8889 0.926   0.001 ***\n1773 0.9613 0.8889 0.924   0.001 ***\n1189 0.9033 0.9444 0.924   0.001 ***\n842  0.9592 0.8889 0.923   0.001 ***\n59   0.9457 0.8889 0.917   0.001 ***\n1114 1.0000 0.8333 0.913   0.001 ***\n1455 1.0000 0.8333 0.913   0.001 ***\n2964 1.0000 0.8333 0.913   0.001 ***\n1200 1.0000 0.8333 0.913   0.001 ***\n2439 1.0000 0.8333 0.913   0.001 ***\n2849 1.0000 0.8333 0.913   0.001 ***\n1029 1.0000 0.8333 0.913   0.001 ***\n1090 1.0000 0.8333 0.913   0.001 ***\n2694 1.0000 0.8333 0.913   0.001 ***\n956  1.0000 0.8333 0.913   0.001 ***\n2555 1.0000 0.8333 0.913   0.001 ***\n774  1.0000 0.8333 0.913   0.001 ***\n4525 1.0000 0.8333 0.913   0.001 ***\n3060 1.0000 0.8333 0.913   0.001 ***\n3250 1.0000 0.8333 0.913   0.001 ***\n254  0.9330 0.8889 0.911   0.001 ***\n1452 0.9288 0.8889 0.909   0.001 ***\n790  0.9903 0.8333 0.908   0.001 ***\n1357 0.9279 0.8889 0.908   0.001 ***\n2107 0.9892 0.8333 0.908   0.001 ***\n1404 0.9256 0.8889 0.907   0.001 ***\n1754 0.9871 0.8333 0.907   0.001 ***\n287  0.9251 0.8889 0.907   0.001 ***\n688  0.9860 0.8333 0.906   0.001 ***\n2169 0.9855 0.8333 0.906   0.001 ***\n698  0.9165 0.8889 0.903   0.001 ***\n400  0.9743 0.8333 0.901   0.001 ***\n335  0.9733 0.8333 0.901   0.001 ***\n1716 0.9674 0.8333 0.898   0.001 ***\n2452 0.9034 0.8889 0.896   0.001 ***\n4473 0.9612 0.8333 0.895   0.001 ***\n336  0.9597 0.8333 0.894   0.001 ***\n163  0.8455 0.9444 0.894   0.001 ***\n4230 0.8983 0.8889 0.894   0.001 ***\n1219 0.9524 0.8333 0.891   0.001 ***\n387  0.9510 0.8333 0.890   0.001 ***\n856  0.9463 0.8333 0.888   0.001 ***\n1759 0.9453 0.8333 0.888   0.001 ***\n1169 0.8772 0.8889 0.883   0.001 ***\n720  0.9351 0.8333 0.883   0.001 ***\n3239 0.9341 0.8333 0.882   0.001 ***\n324  1.0000 0.7778 0.882   0.001 ***\n796  1.0000 0.7778 0.882   0.001 ***\n1364 1.0000 0.7778 0.882   0.001 ***\n218  1.0000 0.7778 0.882   0.001 ***\n1325 0.9867 0.7778 0.876   0.001 ***\n2012 0.9836 0.7778 0.875   0.001 ***\n833  0.8604 0.8889 0.875   0.001 ***\n598  0.9831 0.7778 0.874   0.001 ***\n402  0.9786 0.7778 0.872   0.001 ***\n798  0.9750 0.7778 0.871   0.001 ***\n3575 0.9736 0.7778 0.870   0.001 ***\n2734 0.9730 0.7778 0.870   0.001 ***\n1179 0.9725 0.7778 0.870   0.001 ***\n2741 0.9691 0.7778 0.868   0.001 ***\n895  0.8977 0.8333 0.865   0.001 ***\n1746 0.9431 0.7778 0.856   0.001 ***\n862  0.9379 0.7778 0.854   0.001 ***\n1299 1.0000 0.7222 0.850   0.001 ***\n2658 1.0000 0.7222 0.850   0.001 ***\n3106 1.0000 0.7222 0.850   0.001 ***\n4563 1.0000 0.7222 0.850   0.001 ***\n603  0.9911 0.7222 0.846   0.001 ***\n588  0.9859 0.7222 0.844   0.001 ***\n1386 0.9801 0.7222 0.841   0.001 ***\n3197 0.9078 0.7778 0.840   0.001 ***\n3299 0.9768 0.7222 0.840   0.001 ***\n1635 0.9717 0.7222 0.838   0.001 ***\n2150 0.9689 0.7222 0.837   0.001 ***\n1266 0.9474 0.7222 0.827   0.001 ***\n1564 0.9360 0.7222 0.822   0.001 ***\n2845 0.9336 0.7222 0.821   0.001 ***\n3383 0.9233 0.7222 0.817   0.001 ***\n1997 1.0000 0.6667 0.816   0.001 ***\n4200 1.0000 0.6667 0.816   0.001 ***\n494  1.0000 0.6667 0.816   0.001 ***\n4328 1.0000 0.6667 0.816   0.001 ***\n1497 1.0000 0.6667 0.816   0.001 ***\n2160 1.0000 0.6667 0.816   0.001 ***\n2570 1.0000 0.6667 0.816   0.001 ***\n2857 1.0000 0.6667 0.816   0.001 ***\n2896 1.0000 0.6667 0.816   0.001 ***\n1700 1.0000 0.6667 0.816   0.001 ***\n3016 1.0000 0.6667 0.816   0.001 ***\n1872 1.0000 0.6667 0.816   0.001 ***\n1100 0.9167 0.7222 0.814   0.001 ***\n3566 0.9765 0.6667 0.807   0.001 ***\n2124 0.9754 0.6667 0.806   0.001 ***\n5322 0.9632 0.6667 0.801   0.001 ***\n1298 1.0000 0.6111 0.782   0.001 ***\n2248 1.0000 0.6111 0.782   0.001 ***\n5643 1.0000 0.6111 0.782   0.001 ***\n3341 1.0000 0.6111 0.782   0.001 ***\n2476 1.0000 0.6111 0.782   0.001 ***\n6458 1.0000 0.6111 0.782   0.001 ***\n5116 1.0000 0.6111 0.782   0.001 ***\n5363 1.0000 0.6111 0.782   0.001 ***\n3636 1.0000 0.6111 0.782   0.001 ***\n3476 0.8630 0.6667 0.759   0.001 ***\n2800 1.0000 0.5556 0.745   0.001 ***\n5994 1.0000 0.5556 0.745   0.001 ***\n5566 1.0000 0.5556 0.745   0.001 ***\n3238 1.0000 0.5556 0.745   0.001 ***\n7092 1.0000 0.5556 0.745   0.001 ***\n3462 1.0000 0.5556 0.745   0.001 ***\n\n Group 6+27  #sps.  20 \n           A      B  stat p.value    \n907   1.0000 0.8750 0.935   0.001 ***\n7950  0.9722 0.8750 0.922   0.001 ***\n205   0.9690 0.8750 0.921   0.001 ***\n385   0.9534 0.8750 0.913   0.001 ***\n747   0.9876 0.8125 0.896   0.001 ***\n811   0.9067 0.8750 0.891   0.001 ***\n3860  0.9730 0.8125 0.889   0.001 ***\n2501  0.8919 0.8750 0.883   0.001 ***\n705   1.0000 0.7500 0.866   0.001 ***\n69    0.9880 0.7500 0.861   0.001 ***\n133   0.9842 0.7500 0.859   0.001 ***\n416   0.9570 0.7500 0.847   0.001 ***\n1818  0.9060 0.7500 0.824   0.001 ***\n999   0.9726 0.6875 0.818   0.001 ***\n1634  0.9529 0.6875 0.809   0.001 ***\n1123  0.9310 0.6875 0.800   0.001 ***\n610   0.9252 0.6875 0.798   0.001 ***\n13869 0.8797 0.6875 0.778   0.001 ***\n683   0.9615 0.6250 0.775   0.001 ***\n834   1.0000 0.5000 0.707   0.001 ***\n\n Group 13+20  #sps.  7 \n          A      B  stat p.value    \n531  0.9115 0.8947 0.903   0.001 ***\n1468 0.9005 0.8947 0.898   0.001 ***\n3348 0.8817 0.8947 0.888   0.001 ***\n2030 0.8819 0.8421 0.862   0.001 ***\n4293 0.8794 0.8421 0.861   0.001 ***\n5211 1.0000 0.6842 0.827   0.001 ***\n6874 0.9061 0.6316 0.756   0.001 ***\n\n Group 13+27  #sps.  323 \n           A      B  stat p.value    \n1324  0.9958 1.0000 0.998   0.001 ***\n1052  0.9927 1.0000 0.996   0.001 ***\n749   0.9900 1.0000 0.995   0.001 ***\n5342  0.9890 1.0000 0.995   0.001 ***\n7577  0.9869 1.0000 0.993   0.001 ***\n2865  0.9860 1.0000 0.993   0.001 ***\n2511  0.9855 1.0000 0.993   0.001 ***\n16478 0.9837 1.0000 0.992   0.001 ***\n867   0.9813 1.0000 0.991   0.001 ***\n1091  0.9792 1.0000 0.990   0.001 ***\n1083  0.9777 1.0000 0.989   0.001 ***\n1366  0.9769 1.0000 0.988   0.001 ***\n504   0.9752 1.0000 0.988   0.001 ***\n2493  0.9749 1.0000 0.987   0.001 ***\n1124  0.9745 1.0000 0.987   0.001 ***\n2465  0.9733 1.0000 0.987   0.001 ***\n2579  0.9719 1.0000 0.986   0.001 ***\n3929  0.9703 1.0000 0.985   0.001 ***\n92    0.9689 1.0000 0.984   0.001 ***\n304   0.9671 1.0000 0.983   0.001 ***\n524   0.9652 1.0000 0.982   0.001 ***\n2188  0.9651 1.0000 0.982   0.001 ***\n927   0.9586 1.0000 0.979   0.001 ***\n372   0.9557 1.0000 0.978   0.001 ***\n5239  0.9548 1.0000 0.977   0.001 ***\n8414  0.9535 1.0000 0.976   0.001 ***\n2201  0.9522 1.0000 0.976   0.001 ***\n3447  0.9516 1.0000 0.976   0.001 ***\n4664  0.9499 1.0000 0.975   0.001 ***\n457   0.9486 1.0000 0.974   0.001 ***\n13336 0.9466 1.0000 0.973   0.001 ***\n8511  0.9458 1.0000 0.973   0.001 ***\n2870  0.9456 1.0000 0.972   0.001 ***\n849   0.9438 1.0000 0.972   0.001 ***\n365   0.9421 1.0000 0.971   0.001 ***\n3174  1.0000 0.9412 0.970   0.001 ***\n2747  1.0000 0.9412 0.970   0.001 ***\n5676  1.0000 0.9412 0.970   0.001 ***\n1781  1.0000 0.9412 0.970   0.001 ***\n10428 1.0000 0.9412 0.970   0.001 ***\n1546  0.9407 1.0000 0.970   0.001 ***\n997   0.9389 1.0000 0.969   0.001 ***\n1740  0.9381 1.0000 0.969   0.001 ***\n2994  0.9359 1.0000 0.967   0.001 ***\n1822  0.9355 1.0000 0.967   0.001 ***\n2455  0.9337 1.0000 0.966   0.001 ***\n1248  0.9335 1.0000 0.966   0.001 ***\n1413  0.9313 1.0000 0.965   0.001 ***\n10114 0.9310 1.0000 0.965   0.001 ***\n981   0.9309 1.0000 0.965   0.001 ***\n511   0.9271 1.0000 0.963   0.001 ***\n16598 0.9244 1.0000 0.961   0.001 ***\n1395  0.9237 1.0000 0.961   0.001 ***\n2081  0.9797 0.9412 0.960   0.001 ***\n3466  0.9214 1.0000 0.960   0.001 ***\n2202  0.9208 1.0000 0.960   0.001 ***\n2752  0.9207 1.0000 0.960   0.001 ***\n2748  0.9202 1.0000 0.959   0.001 ***\n3217  0.9196 1.0000 0.959   0.001 ***\n358   0.9189 1.0000 0.959   0.001 ***\n6620  0.9758 0.9412 0.958   0.001 ***\n1310  0.9179 1.0000 0.958   0.001 ***\n3985  0.9720 0.9412 0.956   0.001 ***\n3938  0.9709 0.9412 0.956   0.001 ***\n1133  0.9138 1.0000 0.956   0.001 ***\n1451  0.9120 1.0000 0.955   0.001 ***\n4722  0.9688 0.9412 0.955   0.001 ***\n2696  0.9106 1.0000 0.954   0.001 ***\n2277  0.9669 0.9412 0.954   0.001 ***\n2598  0.9086 1.0000 0.953   0.001 ***\n1317  0.9652 0.9412 0.953   0.001 ***\n2478  0.9642 0.9412 0.953   0.001 ***\n216   0.9059 1.0000 0.952   0.001 ***\n1826  0.9043 1.0000 0.951   0.001 ***\n2427  0.9585 0.9412 0.950   0.001 ***\n8519  0.9014 1.0000 0.949   0.001 ***\n737   0.9009 1.0000 0.949   0.001 ***\n1752  0.9003 1.0000 0.949   0.001 ***\n8273  0.8984 1.0000 0.948   0.001 ***\n3283  0.9534 0.9412 0.947   0.001 ***\n2361  0.8967 1.0000 0.947   0.001 ***\n615   0.8898 1.0000 0.943   0.001 ***\n1599  0.9449 0.9412 0.943   0.001 ***\n4188  0.9443 0.9412 0.943   0.001 ***\n11047 0.9441 0.9412 0.943   0.001 ***\n3691  0.8878 1.0000 0.942   0.001 ***\n16240 0.9422 0.9412 0.942   0.001 ***\n4344  0.9401 0.9412 0.941   0.001 ***\n2558  0.9388 0.9412 0.940   0.001 ***\n8211  1.0000 0.8824 0.939   0.001 ***\n12280 1.0000 0.8824 0.939   0.001 ***\n12204 1.0000 0.8824 0.939   0.001 ***\n2166  0.8821 1.0000 0.939   0.001 ***\n2405  0.9371 0.9412 0.939   0.001 ***\n87    0.9359 0.9412 0.939   0.001 ***\n15733 0.9348 0.9412 0.938   0.001 ***\n4345  0.9337 0.9412 0.937   0.001 ***\n2564  0.9328 0.9412 0.937   0.001 ***\n3203  0.8777 1.0000 0.937   0.001 ***\n9679  0.8769 1.0000 0.936   0.001 ***\n14235 0.9300 0.9412 0.936   0.001 ***\n9435  0.9916 0.8824 0.935   0.001 ***\n2814  0.9910 0.8824 0.935   0.001 ***\n3313  0.9910 0.8824 0.935   0.001 ***\n4691  0.8736 1.0000 0.935   0.001 ***\n804   0.8735 1.0000 0.935   0.001 ***\n6491  0.9265 0.9412 0.934   0.001 ***\n12865 0.9883 0.8824 0.934   0.001 ***\n8216  0.9264 0.9412 0.934   0.001 ***\n13099 0.9226 0.9412 0.932   0.001 ***\n2670  0.9217 0.9412 0.931   0.001 ***\n7099  0.8669 1.0000 0.931   0.001 ***\n11428 0.9199 0.9412 0.930   0.001 ***\n1923  0.8655 1.0000 0.930   0.001 ***\n3845  0.8648 1.0000 0.930   0.001 ***\n2500  0.9800 0.8824 0.930   0.001 ***\n1418  0.9184 0.9412 0.930   0.001 ***\n4377  0.8643 1.0000 0.930   0.001 ***\n4069  0.9782 0.8824 0.929   0.001 ***\n1994  0.9165 0.9412 0.929   0.001 ***\n8304  0.9773 0.8824 0.929   0.001 ***\n2932  0.8623 1.0000 0.929   0.001 ***\n1831  0.9154 0.9412 0.928   0.001 ***\n2341  0.8615 1.0000 0.928   0.001 ***\n4278  0.9153 0.9412 0.928   0.001 ***\n7796  0.9151 0.9412 0.928   0.001 ***\n1167  0.9753 0.8824 0.928   0.001 ***\n5658  0.9748 0.8824 0.927   0.001 ***\n1609  0.9725 0.8824 0.926   0.001 ***\n4287  0.9724 0.8824 0.926   0.001 ***\n1951  0.9085 0.9412 0.925   0.001 ***\n4167  0.9055 0.9412 0.923   0.001 ***\n10941 0.9641 0.8824 0.922   0.001 ***\n5145  0.9022 0.9412 0.921   0.001 ***\n5266  0.9609 0.8824 0.921   0.001 ***\n1927  0.9007 0.9412 0.921   0.001 ***\n5806  0.8992 0.9412 0.920   0.001 ***\n2377  0.9590 0.8824 0.920   0.001 ***\n3555  0.9580 0.8824 0.919   0.001 ***\n1639  0.8974 0.9412 0.919   0.001 ***\n8674  0.9548 0.8824 0.918   0.001 ***\n4028  0.8937 0.9412 0.917   0.001 ***\n4265  0.9527 0.8824 0.917   0.001 ***\n6199  0.8916 0.9412 0.916   0.001 ***\n2514  0.8915 0.9412 0.916   0.001 ***\n7329  0.8382 1.0000 0.916   0.001 ***\n2325  0.8904 0.9412 0.915   0.001 ***\n4504  0.8889 0.9412 0.915   0.001 ***\n4625  0.8861 0.9412 0.913   0.001 ***\n6021  0.8337 1.0000 0.913   0.001 ***\n1776  0.9416 0.8824 0.911   0.001 ***\n1438  0.9400 0.8824 0.911   0.001 ***\n7056  0.8287 1.0000 0.910   0.001 ***\n15016 0.9381 0.8824 0.910   0.001 ***\n1128  0.9376 0.8824 0.910   0.001 ***\n1633  0.9366 0.8824 0.909   0.001 ***\n8666  0.9357 0.8824 0.909   0.001 ***\n5154  0.8767 0.9412 0.908   0.001 ***\n4931  0.8755 0.9412 0.908   0.001 ***\n1153  0.8752 0.9412 0.908   0.001 ***\n4603  1.0000 0.8235 0.907   0.001 ***\n7507  0.9333 0.8824 0.907   0.001 ***\n2274  0.8743 0.9412 0.907   0.001 ***\n2976  0.8727 0.9412 0.906   0.001 ***\n1899  0.8722 0.9412 0.906   0.001 ***\n6159  0.9289 0.8824 0.905   0.001 ***\n2370  0.8691 0.9412 0.904   0.001 ***\n7744  0.8639 0.9412 0.902   0.001 ***\n12482 0.9211 0.8824 0.901   0.001 ***\n2667  0.9199 0.8824 0.901   0.001 ***\n1684  0.9851 0.8235 0.901   0.001 ***\n5656  0.9172 0.8824 0.900   0.001 ***\n12401 0.9789 0.8235 0.898   0.001 ***\n6939  0.9129 0.8824 0.897   0.001 ***\n1064  0.9126 0.8824 0.897   0.001 ***\n4750  0.8546 0.9412 0.897   0.001 ***\n1141  0.9113 0.8824 0.897   0.001 ***\n2925  0.8543 0.9412 0.897   0.001 ***\n2519  0.9109 0.8824 0.897   0.001 ***\n2993  0.9107 0.8824 0.896   0.001 ***\n10649 0.9738 0.8235 0.896   0.001 ***\n10115 0.8505 0.9412 0.895   0.001 ***\n10985 0.9706 0.8235 0.894   0.001 ***\n4676  0.8492 0.9412 0.894   0.001 ***\n11343 0.9041 0.8824 0.893   0.001 ***\n6418  0.8421 0.9412 0.890   0.001 ***\n4814  0.8980 0.8824 0.890   0.001 ***\n7778  0.8960 0.8824 0.889   0.001 ***\n3125  0.8953 0.8824 0.889   0.001 ***\n7546  0.8903 0.8824 0.886   0.001 ***\n4594  0.8882 0.8824 0.885   0.001 ***\n5098  0.8845 0.8824 0.883   0.001 ***\n1976  0.8840 0.8824 0.883   0.001 ***\n16922 0.8829 0.8824 0.883   0.001 ***\n2789  0.8814 0.8824 0.882   0.001 ***\n8084  0.8813 0.8824 0.882   0.001 ***\n11424 0.8795 0.8824 0.881   0.001 ***\n11348 0.8791 0.8824 0.881   0.001 ***\n4305  0.8755 0.8824 0.879   0.001 ***\n1843  0.8723 0.8824 0.877   0.001 ***\n6019  0.9337 0.8235 0.877   0.001 ***\n7244  1.0000 0.7647 0.874   0.001 ***\n7112  1.0000 0.7647 0.874   0.001 ***\n6562  1.0000 0.7647 0.874   0.001 ***\n5576  1.0000 0.7647 0.874   0.001 ***\n10702 1.0000 0.7647 0.874   0.001 ***\n6634  1.0000 0.7647 0.874   0.001 ***\n12652 1.0000 0.7647 0.874   0.001 ***\n3252  0.9278 0.8235 0.874   0.001 ***\n3135  0.9270 0.8235 0.874   0.001 ***\n2073  0.9234 0.8235 0.872   0.001 ***\n14454 0.9234 0.8235 0.872   0.001 ***\n2580  0.9233 0.8235 0.872   0.001 ***\n2591  0.9231 0.8235 0.872   0.001 ***\n8852  0.9919 0.7647 0.871   0.001 ***\n11652 0.8588 0.8824 0.871   0.001 ***\n6282  0.9189 0.8235 0.870   0.001 ***\n2184  0.9177 0.8235 0.869   0.001 ***\n452   0.9149 0.8235 0.868   0.001 ***\n9568  0.9147 0.8235 0.868   0.001 ***\n6696  0.9122 0.8235 0.867   0.001 ***\n3079  0.7981 0.9412 0.867   0.001 ***\n6012  0.8511 0.8824 0.867   0.001 ***\n8646  0.9116 0.8235 0.866   0.001 ***\n4509  0.9106 0.8235 0.866   0.001 ***\n1877  0.9793 0.7647 0.865   0.001 ***\n3463  0.9079 0.8235 0.865   0.001 ***\n7624  0.9736 0.7647 0.863   0.001 ***\n1302  0.9040 0.8235 0.863   0.001 ***\n9617  0.9731 0.7647 0.863   0.001 ***\n1122  0.8416 0.8824 0.862   0.001 ***\n8333  0.9690 0.7647 0.861   0.001 ***\n12230 0.8973 0.8235 0.860   0.001 ***\n9861  0.9658 0.7647 0.859   0.001 ***\n14287 0.8929 0.8235 0.857   0.001 ***\n2258  0.9574 0.7647 0.856   0.001 ***\n3578  0.8287 0.8824 0.855   0.001 ***\n1885  0.8877 0.8235 0.855   0.001 ***\n9674  0.9559 0.7647 0.855   0.001 ***\n16439 0.8868 0.8235 0.855   0.001 ***\n735   0.8861 0.8235 0.854   0.001 ***\n9475  0.9507 0.7647 0.853   0.001 ***\n6410  0.9459 0.7647 0.851   0.001 ***\n8233  0.9448 0.7647 0.850   0.001 ***\n7429  0.8764 0.8235 0.850   0.001 ***\n13701 0.9301 0.7647 0.843   0.001 ***\n4489  0.9289 0.7647 0.843   0.001 ***\n8446  0.8605 0.8235 0.842   0.001 ***\n5236  1.0000 0.7059 0.840   0.001 ***\n3026  1.0000 0.7059 0.840   0.001 ***\n6017  1.0000 0.7059 0.840   0.001 ***\n9881  1.0000 0.7059 0.840   0.001 ***\n3124  1.0000 0.7059 0.840   0.001 ***\n5608  1.0000 0.7059 0.840   0.001 ***\n9186  1.0000 0.7059 0.840   0.001 ***\n4837  1.0000 0.7059 0.840   0.001 ***\n9463  1.0000 0.7059 0.840   0.001 ***\n13839 1.0000 0.7059 0.840   0.001 ***\n12446 1.0000 0.7059 0.840   0.001 ***\n11090 1.0000 0.7059 0.840   0.001 ***\n4477  0.9221 0.7647 0.840   0.001 ***\n1782  0.9193 0.7647 0.838   0.001 ***\n5549  0.9178 0.7647 0.838   0.001 ***\n17204 0.9147 0.7647 0.836   0.001 ***\n15027 0.8464 0.8235 0.835   0.001 ***\n13672 0.8430 0.8235 0.833   0.001 ***\n6470  0.9799 0.7059 0.832   0.001 ***\n4590  0.8989 0.7647 0.829   0.001 ***\n9916  0.9693 0.7059 0.827   0.001 ***\n12899 0.8924 0.7647 0.826   0.001 ***\n6523  0.9656 0.7059 0.826   0.001 ***\n9201  0.9654 0.7059 0.826   0.001 ***\n4773  0.8892 0.7647 0.825   0.001 ***\n7492  0.8856 0.7647 0.823   0.001 ***\n2359  0.8812 0.7647 0.821   0.001 ***\n11282 0.9514 0.7059 0.819   0.001 ***\n14696 0.9486 0.7059 0.818   0.001 ***\n6076  0.9420 0.7059 0.815   0.001 ***\n1004  0.9412 0.7059 0.815   0.001 ***\n2488  0.9404 0.7059 0.815   0.001 ***\n8290  0.9366 0.7059 0.813   0.001 ***\n15320 0.9333 0.7059 0.812   0.001 ***\n6865  0.8551 0.7647 0.809   0.001 ***\n11102 0.8548 0.7647 0.809   0.001 ***\n4820  1.0000 0.6471 0.804   0.001 ***\n14600 1.0000 0.6471 0.804   0.001 ***\n7400  1.0000 0.6471 0.804   0.001 ***\n14692 1.0000 0.6471 0.804   0.001 ***\n17450 1.0000 0.6471 0.804   0.001 ***\n12755 1.0000 0.6471 0.804   0.001 ***\n12039 1.0000 0.6471 0.804   0.001 ***\n14010 1.0000 0.6471 0.804   0.001 ***\n15948 1.0000 0.6471 0.804   0.001 ***\n9964  1.0000 0.6471 0.804   0.001 ***\n15695 0.8462 0.7647 0.804   0.001 ***\n10162 0.9095 0.7059 0.801   0.001 ***\n16916 0.9067 0.7059 0.800   0.001 ***\n9506  0.9048 0.7059 0.799   0.001 ***\n5247  0.9043 0.7059 0.799   0.001 ***\n6401  0.8960 0.7059 0.795   0.001 ***\n1391  0.8227 0.7647 0.793   0.001 ***\n16957 0.8875 0.7059 0.791   0.001 ***\n6483  0.9637 0.6471 0.790   0.001 ***\n9597  0.9617 0.6471 0.789   0.001 ***\n6794  0.9602 0.6471 0.788   0.001 ***\n3694  0.9600 0.6471 0.788   0.001 ***\n13404 0.8784 0.7059 0.787   0.001 ***\n14411 0.9511 0.6471 0.784   0.001 ***\n9720  0.9455 0.6471 0.782   0.001 ***\n13568 0.9427 0.6471 0.781   0.001 ***\n16061 0.9408 0.6471 0.780   0.001 ***\n14683 0.9371 0.6471 0.779   0.001 ***\n741   0.9247 0.6471 0.774   0.001 ***\n8577  1.0000 0.5882 0.767   0.001 ***\n168   1.0000 0.5882 0.767   0.001 ***\n14983 1.0000 0.5882 0.767   0.001 ***\n14440 1.0000 0.5882 0.767   0.001 ***\n10678 1.0000 0.5882 0.767   0.001 ***\n9585  1.0000 0.5882 0.767   0.001 ***\n13153 1.0000 0.5882 0.767   0.001 ***\n10683 1.0000 0.5882 0.767   0.001 ***\n4995  0.9016 0.6471 0.764   0.001 ***\n9814  1.0000 0.5294 0.728   0.001 ***\n\n Group 20+27  #sps.  7 \n          A      B  stat p.value    \n3158 0.9286 1.0000 0.964   0.001 ***\n1536 0.9020 0.9444 0.923   0.001 ***\n1316 0.8143 1.0000 0.902   0.001 ***\n1242 0.8813 0.8889 0.885   0.001 ***\n3120 0.9235 0.7778 0.848   0.001 ***\n1540 0.9138 0.7222 0.812   0.001 ***\n3880 0.8958 0.7222 0.804   0.001 ***\n\n Group 6+13+20  #sps.  8 \n          A      B  stat p.value    \n418  0.9714 1.0000 0.986   0.001 ***\n1979 0.9614 0.9630 0.962   0.001 ***\n1942 0.9552 0.9630 0.959   0.001 ***\n2155 0.9888 0.8889 0.937   0.001 ***\n3140 0.9617 0.8889 0.925   0.001 ***\n3012 0.9526 0.8889 0.920   0.001 ***\n2052 0.9752 0.8519 0.911   0.001 ***\n3665 1.0000 0.7037 0.839   0.001 ***\n\n Group 6+13+27  #sps.  428 \n           A      B  stat p.value    \n2103  0.9978 1.0000 0.999   0.001 ***\n1477  0.9973 1.0000 0.999   0.001 ***\n943   0.9945 1.0000 0.997   0.001 ***\n631   0.9944 1.0000 0.997   0.001 ***\n212   0.9943 1.0000 0.997   0.001 ***\n124   0.9929 1.0000 0.996   0.001 ***\n1088  0.9908 1.0000 0.995   0.001 ***\n181   0.9906 1.0000 0.995   0.001 ***\n7128  0.9889 1.0000 0.994   0.001 ***\n8622  0.9884 1.0000 0.994   0.001 ***\n3019  0.9880 1.0000 0.994   0.001 ***\n11    0.9830 1.0000 0.991   0.001 ***\n1992  0.9810 1.0000 0.990   0.001 ***\n7152  0.9799 1.0000 0.990   0.001 ***\n96    0.9750 1.0000 0.987   0.001 ***\n637   0.9662 1.0000 0.983   0.001 ***\n411   0.9628 1.0000 0.981   0.001 ***\n7575  0.9995 0.9600 0.980   0.001 ***\n940   0.9991 0.9600 0.979   0.001 ***\n112   0.9986 0.9600 0.979   0.001 ***\n1349  0.9569 1.0000 0.978   0.001 ***\n3733  0.9960 0.9600 0.978   0.001 ***\n100   0.9955 0.9600 0.978   0.001 ***\n4174  0.9942 0.9600 0.977   0.001 ***\n1354  0.9935 0.9600 0.977   0.001 ***\n4274  0.9530 1.0000 0.976   0.001 ***\n1214  0.9920 0.9600 0.976   0.001 ***\n2396  0.9502 1.0000 0.975   0.001 ***\n2731  0.9887 0.9600 0.974   0.001 ***\n3544  0.9880 0.9600 0.974   0.001 ***\n932   0.9871 0.9600 0.973   0.001 ***\n2690  0.9863 0.9600 0.973   0.001 ***\n775   0.9863 0.9600 0.973   0.001 ***\n227   0.9862 0.9600 0.973   0.001 ***\n153   0.9855 0.9600 0.973   0.001 ***\n641   0.9847 0.9600 0.972   0.001 ***\n71    0.9419 1.0000 0.971   0.001 ***\n1320  0.9414 1.0000 0.970   0.001 ***\n319   0.9803 0.9600 0.970   0.001 ***\n1130  0.9782 0.9600 0.969   0.001 ***\n2017  0.9751 0.9600 0.968   0.001 ***\n1063  0.9691 0.9600 0.965   0.001 ***\n2902  0.9688 0.9600 0.964   0.001 ***\n1274  0.9680 0.9600 0.964   0.001 ***\n1840  1.0000 0.9200 0.959   0.001 ***\n6343  1.0000 0.9200 0.959   0.001 ***\n1780  1.0000 0.9200 0.959   0.001 ***\n147   1.0000 0.9200 0.959   0.001 ***\n7382  1.0000 0.9200 0.959   0.001 ***\n215   1.0000 0.9200 0.959   0.001 ***\n102   1.0000 0.9200 0.959   0.001 ***\n1517  1.0000 0.9200 0.959   0.001 ***\n354   1.0000 0.9200 0.959   0.001 ***\n228   1.0000 0.9200 0.959   0.001 ***\n2659  1.0000 0.9200 0.959   0.001 ***\n401   1.0000 0.9200 0.959   0.001 ***\n8299  1.0000 0.9200 0.959   0.001 ***\n6328  1.0000 0.9200 0.959   0.001 ***\n635   1.0000 0.9200 0.959   0.001 ***\n6396  1.0000 0.9200 0.959   0.001 ***\n1174  1.0000 0.9200 0.959   0.001 ***\n5016  1.0000 0.9200 0.959   0.001 ***\n7168  1.0000 0.9200 0.959   0.001 ***\n7238  1.0000 0.9200 0.959   0.001 ***\n8218  1.0000 0.9200 0.959   0.001 ***\n4530  1.0000 0.9200 0.959   0.001 ***\n6147  1.0000 0.9200 0.959   0.001 ***\n2086  1.0000 0.9200 0.959   0.001 ***\n167   1.0000 0.9200 0.959   0.001 ***\n174   1.0000 0.9200 0.959   0.001 ***\n467   1.0000 0.9200 0.959   0.001 ***\n17286 1.0000 0.9200 0.959   0.001 ***\n2388  1.0000 0.9200 0.959   0.001 ***\n17673 1.0000 0.9200 0.959   0.001 ***\n2889  1.0000 0.9200 0.959   0.001 ***\n675   1.0000 0.9200 0.959   0.001 ***\n1479  1.0000 0.9200 0.959   0.001 ***\n1228  1.0000 0.9200 0.959   0.001 ***\n330   1.0000 0.9200 0.959   0.001 ***\n36    1.0000 0.9200 0.959   0.001 ***\n527   1.0000 0.9200 0.959   0.001 ***\n1911  1.0000 0.9200 0.959   0.001 ***\n291   1.0000 0.9200 0.959   0.001 ***\n378   1.0000 0.9200 0.959   0.001 ***\n11634 1.0000 0.9200 0.959   0.001 ***\n14493 1.0000 0.9200 0.959   0.001 ***\n16615 1.0000 0.9200 0.959   0.001 ***\n13789 1.0000 0.9200 0.959   0.001 ***\n847   1.0000 0.9200 0.959   0.001 ***\n32    1.0000 0.9200 0.959   0.001 ***\n13420 1.0000 0.9200 0.959   0.001 ***\n7198  1.0000 0.9200 0.959   0.001 ***\n6370  1.0000 0.9200 0.959   0.001 ***\n1221  1.0000 0.9200 0.959   0.001 ***\n38    1.0000 0.9200 0.959   0.001 ***\n14305 1.0000 0.9200 0.959   0.001 ***\n4736  1.0000 0.9200 0.959   0.001 ***\n863   1.0000 0.9200 0.959   0.001 ***\n13851 1.0000 0.9200 0.959   0.001 ***\n10281 1.0000 0.9200 0.959   0.001 ***\n1165  1.0000 0.9200 0.959   0.001 ***\n14151 1.0000 0.9200 0.959   0.001 ***\n1714  1.0000 0.9200 0.959   0.001 ***\n5118  1.0000 0.9200 0.959   0.001 ***\n10258 1.0000 0.9200 0.959   0.001 ***\n10131 1.0000 0.9200 0.959   0.001 ***\n479   1.0000 0.9200 0.959   0.001 ***\n13210 1.0000 0.9200 0.959   0.001 ***\n12035 1.0000 0.9200 0.959   0.001 ***\n4624  1.0000 0.9200 0.959   0.001 ***\n9801  1.0000 0.9200 0.959   0.001 ***\n12291 1.0000 0.9200 0.959   0.001 ***\n912   1.0000 0.9200 0.959   0.001 ***\n9406  1.0000 0.9200 0.959   0.001 ***\n622   1.0000 0.9200 0.959   0.001 ***\n14377 1.0000 0.9200 0.959   0.001 ***\n135   1.0000 0.9200 0.959   0.001 ***\n2434  1.0000 0.9200 0.959   0.001 ***\n16590 1.0000 0.9200 0.959   0.001 ***\n9645  1.0000 0.9200 0.959   0.001 ***\n12820 1.0000 0.9200 0.959   0.001 ***\n3137  1.0000 0.9200 0.959   0.001 ***\n180   1.0000 0.9200 0.959   0.001 ***\n13104 1.0000 0.9200 0.959   0.001 ***\n16376 1.0000 0.9200 0.959   0.001 ***\n139   1.0000 0.9200 0.959   0.001 ***\n14286 1.0000 0.9200 0.959   0.001 ***\n221   1.0000 0.9200 0.959   0.001 ***\n298   1.0000 0.9200 0.959   0.001 ***\n51    1.0000 0.9200 0.959   0.001 ***\n539   1.0000 0.9200 0.959   0.001 ***\n231   1.0000 0.9200 0.959   0.001 ***\n554   1.0000 0.9200 0.959   0.001 ***\n3     1.0000 0.9200 0.959   0.001 ***\n616   1.0000 0.9200 0.959   0.001 ***\n1847  0.9998 0.9200 0.959   0.001 ***\n1783  0.9995 0.9200 0.959   0.001 ***\n1674  0.9995 0.9200 0.959   0.001 ***\n1737  0.9994 0.9200 0.959   0.001 ***\n79    0.9990 0.9200 0.959   0.001 ***\n7192  0.9990 0.9200 0.959   0.001 ***\n1989  0.9990 0.9200 0.959   0.001 ***\n513   0.9985 0.9200 0.958   0.001 ***\n7148  0.9983 0.9200 0.958   0.001 ***\n183   0.9983 0.9200 0.958   0.001 ***\n8537  0.9981 0.9200 0.958   0.001 ***\n6485  0.9980 0.9200 0.958   0.001 ***\n3005  0.9977 0.9200 0.958   0.001 ***\n1961  0.9975 0.9200 0.958   0.001 ***\n3763  0.9974 0.9200 0.958   0.001 ***\n1498  0.9970 0.9200 0.958   0.001 ***\n8133  0.9968 0.9200 0.958   0.001 ***\n9004  0.9963 0.9200 0.957   0.001 ***\n5647  0.9962 0.9200 0.957   0.001 ***\n7300  0.9955 0.9200 0.957   0.001 ***\n3033  0.9944 0.9200 0.956   0.001 ***\n1849  0.9530 0.9600 0.956   0.001 ***\n2263  0.9527 0.9600 0.956   0.001 ***\n5992  0.9938 0.9200 0.956   0.001 ***\n7536  0.9936 0.9200 0.956   0.001 ***\n987   0.9926 0.9200 0.956   0.001 ***\n7229  0.9917 0.9200 0.955   0.001 ***\n8478  0.9916 0.9200 0.955   0.001 ***\n952   0.9916 0.9200 0.955   0.001 ***\n1163  0.9498 0.9600 0.955   0.001 ***\n6933  0.9910 0.9200 0.955   0.001 ***\n2839  0.9492 0.9600 0.955   0.001 ***\n1711  0.9888 0.9200 0.954   0.001 ***\n2306  0.9878 0.9200 0.953   0.001 ***\n1584  0.9863 0.9200 0.953   0.001 ***\n627   0.9862 0.9200 0.953   0.001 ***\n1417  0.9856 0.9200 0.952   0.001 ***\n1917  0.9812 0.9200 0.950   0.001 ***\n3836  0.9791 0.9200 0.949   0.001 ***\n8370  0.9788 0.9200 0.949   0.001 ***\n1718  0.9788 0.9200 0.949   0.001 ***\n2221  0.9766 0.9200 0.948   0.001 ***\n5417  0.9358 0.9600 0.948   0.001 ***\n490   0.9643 0.9200 0.942   0.001 ***\n1235  0.9592 0.9200 0.939   0.001 ***\n553   1.0000 0.8800 0.938   0.001 ***\n413   1.0000 0.8800 0.938   0.001 ***\n5456  1.0000 0.8800 0.938   0.001 ***\n1565  1.0000 0.8800 0.938   0.001 ***\n4634  1.0000 0.8800 0.938   0.001 ***\n8268  1.0000 0.8800 0.938   0.001 ***\n7911  1.0000 0.8800 0.938   0.001 ***\n4915  1.0000 0.8800 0.938   0.001 ***\n4140  1.0000 0.8800 0.938   0.001 ***\n6325  1.0000 0.8800 0.938   0.001 ***\n2428  1.0000 0.8800 0.938   0.001 ***\n11334 1.0000 0.8800 0.938   0.001 ***\n11910 1.0000 0.8800 0.938   0.001 ***\n1394  1.0000 0.8800 0.938   0.001 ***\n495   1.0000 0.8800 0.938   0.001 ***\n10533 1.0000 0.8800 0.938   0.001 ***\n4199  1.0000 0.8800 0.938   0.001 ***\n12495 1.0000 0.8800 0.938   0.001 ***\n1494  1.0000 0.8800 0.938   0.001 ***\n1360  1.0000 0.8800 0.938   0.001 ***\n6821  1.0000 0.8800 0.938   0.001 ***\n11010 1.0000 0.8800 0.938   0.001 ***\n14453 1.0000 0.8800 0.938   0.001 ***\n12919 1.0000 0.8800 0.938   0.001 ***\n3661  1.0000 0.8800 0.938   0.001 ***\n13536 1.0000 0.8800 0.938   0.001 ***\n13401 1.0000 0.8800 0.938   0.001 ***\n2796  1.0000 0.8800 0.938   0.001 ***\n1895  1.0000 0.8800 0.938   0.001 ***\n1196  1.0000 0.8800 0.938   0.001 ***\n316   1.0000 0.8800 0.938   0.001 ***\n808   1.0000 0.8800 0.938   0.001 ***\n2189  0.9557 0.9200 0.938   0.001 ***\n4434  0.9549 0.9200 0.937   0.001 ***\n219   0.9962 0.8800 0.936   0.001 ***\n1347  0.9958 0.8800 0.936   0.001 ***\n2409  0.9932 0.8800 0.935   0.001 ***\n1092  0.9912 0.8800 0.934   0.001 ***\n3222  0.9910 0.8800 0.934   0.001 ***\n5989  0.9882 0.8800 0.933   0.001 ***\n3193  0.9881 0.8800 0.932   0.001 ***\n713   0.9872 0.8800 0.932   0.001 ***\n3701  0.9869 0.8800 0.932   0.001 ***\n8717  0.9852 0.8800 0.931   0.001 ***\n4671  0.9835 0.8800 0.930   0.001 ***\n488   0.9828 0.8800 0.930   0.001 ***\n7327  0.9783 0.8800 0.928   0.001 ***\n1642  0.9782 0.8800 0.928   0.001 ***\n1356  0.9778 0.8800 0.928   0.001 ***\n4933  0.9772 0.8800 0.927   0.001 ***\n7614  0.9743 0.8800 0.926   0.001 ***\n2832  0.9319 0.9200 0.926   0.001 ***\n5742  0.9738 0.8800 0.926   0.001 ***\n6261  0.9712 0.8800 0.924   0.001 ***\n1297  0.9703 0.8800 0.924   0.001 ***\n1374  0.9689 0.8800 0.923   0.001 ***\n2738  0.9638 0.8800 0.921   0.001 ***\n3189  0.9585 0.8800 0.918   0.001 ***\n879   1.0000 0.8400 0.917   0.001 ***\n6669  1.0000 0.8400 0.917   0.001 ***\n6263  1.0000 0.8400 0.917   0.001 ***\n2018  1.0000 0.8400 0.917   0.001 ***\n813   1.0000 0.8400 0.917   0.001 ***\n807   1.0000 0.8400 0.917   0.001 ***\n1984  1.0000 0.8400 0.917   0.001 ***\n3154  1.0000 0.8400 0.917   0.001 ***\n7951  1.0000 0.8400 0.917   0.001 ***\n7779  1.0000 0.8400 0.917   0.001 ***\n5966  1.0000 0.8400 0.917   0.001 ***\n8780  1.0000 0.8400 0.917   0.001 ***\n8997  1.0000 0.8400 0.917   0.001 ***\n11651 1.0000 0.8400 0.917   0.001 ***\n14755 1.0000 0.8400 0.917   0.001 ***\n17294 1.0000 0.8400 0.917   0.001 ***\n10    1.0000 0.8400 0.917   0.001 ***\n15570 1.0000 0.8400 0.917   0.001 ***\n3526  1.0000 0.8400 0.917   0.001 ***\n10474 1.0000 0.8400 0.917   0.001 ***\n11797 1.0000 0.8400 0.917   0.001 ***\n11006 1.0000 0.8400 0.917   0.001 ***\n12789 1.0000 0.8400 0.917   0.001 ***\n9767  1.0000 0.8400 0.917   0.001 ***\n1949  1.0000 0.8400 0.917   0.001 ***\n17141 1.0000 0.8400 0.917   0.001 ***\n16167 1.0000 0.8400 0.917   0.001 ***\n15255 1.0000 0.8400 0.917   0.001 ***\n9917  1.0000 0.8400 0.917   0.001 ***\n3159  1.0000 0.8400 0.917   0.001 ***\n9922  1.0000 0.8400 0.917   0.001 ***\n625   1.0000 0.8400 0.917   0.001 ***\n15887 1.0000 0.8400 0.917   0.001 ***\n9376  1.0000 0.8400 0.917   0.001 ***\n14902 1.0000 0.8400 0.917   0.001 ***\n18357 1.0000 0.8400 0.917   0.001 ***\n611   1.0000 0.8400 0.917   0.001 ***\n431   1.0000 0.8400 0.917   0.001 ***\n129   1.0000 0.8400 0.917   0.001 ***\n60    1.0000 0.8400 0.917   0.001 ***\n15124 1.0000 0.8400 0.917   0.001 ***\n1066  1.0000 0.8400 0.917   0.001 ***\n398   1.0000 0.8400 0.917   0.001 ***\n158   1.0000 0.8400 0.917   0.001 ***\n2281  1.0000 0.8400 0.917   0.001 ***\n11798 1.0000 0.8400 0.917   0.001 ***\n3206  1.0000 0.8400 0.917   0.001 ***\n5159  1.0000 0.8400 0.917   0.001 ***\n9036  0.9961 0.8400 0.915   0.001 ***\n1341  0.9936 0.8400 0.914   0.001 ***\n5498  0.9931 0.8400 0.913   0.001 ***\n5940  0.9917 0.8400 0.913   0.001 ***\n3820  0.9905 0.8400 0.912   0.001 ***\n7166  0.9900 0.8400 0.912   0.001 ***\n8024  0.9872 0.8400 0.911   0.001 ***\n5119  0.9862 0.8400 0.910   0.001 ***\n4725  0.9843 0.8400 0.909   0.001 ***\n1857  0.9765 0.8400 0.906   0.001 ***\n6832  0.9727 0.8400 0.904   0.001 ***\n8186  0.9651 0.8400 0.900   0.001 ***\n7437  1.0000 0.8000 0.894   0.001 ***\n2080  1.0000 0.8000 0.894   0.001 ***\n5716  1.0000 0.8000 0.894   0.001 ***\n2117  1.0000 0.8000 0.894   0.001 ***\n2118  1.0000 0.8000 0.894   0.001 ***\n1656  1.0000 0.8000 0.894   0.001 ***\n784   1.0000 0.8000 0.894   0.001 ***\n6981  1.0000 0.8000 0.894   0.001 ***\n8822  1.0000 0.8000 0.894   0.001 ***\n18281 1.0000 0.8000 0.894   0.001 ***\n13978 1.0000 0.8000 0.894   0.001 ***\n4532  1.0000 0.8000 0.894   0.001 ***\n11463 1.0000 0.8000 0.894   0.001 ***\n11417 1.0000 0.8000 0.894   0.001 ***\n984   1.0000 0.8000 0.894   0.001 ***\n1436  1.0000 0.8000 0.894   0.001 ***\n17049 1.0000 0.8000 0.894   0.001 ***\n3010  1.0000 0.8000 0.894   0.001 ***\n11777 1.0000 0.8000 0.894   0.001 ***\n1632  1.0000 0.8000 0.894   0.001 ***\n696   1.0000 0.8000 0.894   0.001 ***\n14635 1.0000 0.8000 0.894   0.001 ***\n8785  1.0000 0.8000 0.894   0.001 ***\n2312  1.0000 0.8000 0.894   0.001 ***\n18335 1.0000 0.8000 0.894   0.001 ***\n11509 1.0000 0.8000 0.894   0.001 ***\n16166 1.0000 0.8000 0.894   0.001 ***\n1670  1.0000 0.8000 0.894   0.001 ***\n9594  1.0000 0.8000 0.894   0.001 ***\n9763  1.0000 0.8000 0.894   0.001 ***\n10626 1.0000 0.8000 0.894   0.001 ***\n213   1.0000 0.8000 0.894   0.001 ***\n425   1.0000 0.8000 0.894   0.001 ***\n1203  1.0000 0.8000 0.894   0.001 ***\n5523  1.0000 0.8000 0.894   0.001 ***\n2395  1.0000 0.8000 0.894   0.001 ***\n10995 1.0000 0.8000 0.894   0.001 ***\n16081 1.0000 0.8000 0.894   0.001 ***\n2891  0.9502 0.8400 0.893   0.001 ***\n4561  0.9502 0.8400 0.893   0.001 ***\n4786  0.9951 0.8000 0.892   0.001 ***\n617   0.9889 0.8000 0.889   0.001 ***\n1215  0.9885 0.8000 0.889   0.001 ***\n5873  0.9871 0.8000 0.889   0.001 ***\n5180  0.9822 0.8000 0.886   0.001 ***\n1594  0.9815 0.8000 0.886   0.001 ***\n2854  0.9813 0.8000 0.886   0.001 ***\n1953  0.9765 0.8000 0.884   0.001 ***\n7270  0.9691 0.8000 0.880   0.001 ***\n6497  0.9618 0.8000 0.877   0.001 ***\n1806  1.0000 0.7600 0.872   0.001 ***\n3146  1.0000 0.7600 0.872   0.001 ***\n7504  1.0000 0.7600 0.872   0.001 ***\n2041  1.0000 0.7600 0.872   0.001 ***\n585   1.0000 0.7600 0.872   0.001 ***\n1733  1.0000 0.7600 0.872   0.001 ***\n2716  1.0000 0.7600 0.872   0.001 ***\n2077  1.0000 0.7600 0.872   0.001 ***\n3557  1.0000 0.7600 0.872   0.001 ***\n8210  1.0000 0.7600 0.872   0.001 ***\n1835  1.0000 0.7600 0.872   0.001 ***\n592   1.0000 0.7600 0.872   0.001 ***\n498   1.0000 0.7600 0.872   0.001 ***\n315   1.0000 0.7600 0.872   0.001 ***\n4810  1.0000 0.7600 0.872   0.001 ***\n9857  1.0000 0.7600 0.872   0.001 ***\n12772 1.0000 0.7600 0.872   0.001 ***\n15339 1.0000 0.7600 0.872   0.001 ***\n2877  1.0000 0.7600 0.872   0.001 ***\n12259 1.0000 0.7600 0.872   0.001 ***\n5863  1.0000 0.7600 0.872   0.001 ***\n13344 1.0000 0.7600 0.872   0.001 ***\n13022 1.0000 0.7600 0.872   0.001 ***\n8996  1.0000 0.7600 0.872   0.001 ***\n16266 1.0000 0.7600 0.872   0.001 ***\n13829 1.0000 0.7600 0.872   0.001 ***\n15635 1.0000 0.7600 0.872   0.001 ***\n10797 1.0000 0.7600 0.872   0.001 ***\n2397  1.0000 0.7600 0.872   0.001 ***\n2772  1.0000 0.7600 0.872   0.001 ***\n10425 1.0000 0.7600 0.872   0.001 ***\n2525  0.9864 0.7600 0.866   0.001 ***\n1375  0.9854 0.7600 0.865   0.001 ***\n2960  0.9825 0.7600 0.864   0.001 ***\n3360  1.0000 0.7200 0.849   0.001 ***\n2875  1.0000 0.7200 0.849   0.001 ***\n5574  1.0000 0.7200 0.849   0.001 ***\n3267  1.0000 0.7200 0.849   0.001 ***\n1993  1.0000 0.7200 0.849   0.001 ***\n2583  1.0000 0.7200 0.849   0.001 ***\n2763  1.0000 0.7200 0.849   0.001 ***\n5045  1.0000 0.7200 0.849   0.001 ***\n1605  1.0000 0.7200 0.849   0.001 ***\n3791  1.0000 0.7200 0.849   0.001 ***\n8377  1.0000 0.7200 0.849   0.001 ***\n7273  1.0000 0.7200 0.849   0.001 ***\n16639 1.0000 0.7200 0.849   0.001 ***\n9401  1.0000 0.7200 0.849   0.001 ***\n13407 1.0000 0.7200 0.849   0.001 ***\n14699 1.0000 0.7200 0.849   0.001 ***\n15499 1.0000 0.7200 0.849   0.001 ***\n2394  1.0000 0.7200 0.849   0.001 ***\n12111 1.0000 0.7200 0.849   0.001 ***\n7995  1.0000 0.7200 0.849   0.001 ***\n3658  1.0000 0.7200 0.849   0.001 ***\n646   1.0000 0.7200 0.849   0.001 ***\n2010  1.0000 0.7200 0.849   0.001 ***\n14123 1.0000 0.7200 0.849   0.001 ***\n4371  1.0000 0.7200 0.849   0.001 ***\n3179  0.9862 0.7200 0.843   0.001 ***\n6133  0.9852 0.7200 0.842   0.001 ***\n3657  0.9819 0.7200 0.841   0.001 ***\n6102  1.0000 0.6800 0.825   0.001 ***\n7891  1.0000 0.6800 0.825   0.001 ***\n4905  1.0000 0.6800 0.825   0.001 ***\n17702 1.0000 0.6800 0.825   0.001 ***\n11702 1.0000 0.6800 0.825   0.001 ***\n18202 1.0000 0.6800 0.825   0.001 ***\n15308 1.0000 0.6800 0.825   0.001 ***\n15898 1.0000 0.6800 0.825   0.001 ***\n14703 1.0000 0.6800 0.825   0.001 ***\n17853 1.0000 0.6800 0.825   0.001 ***\n15149 1.0000 0.6800 0.825   0.001 ***\n4281  1.0000 0.6800 0.825   0.001 ***\n2375  1.0000 0.6800 0.825   0.001 ***\n13785 1.0000 0.6800 0.825   0.001 ***\n3674  0.9852 0.6800 0.818   0.001 ***\n2846  1.0000 0.6400 0.800   0.001 ***\n12716 1.0000 0.6400 0.800   0.001 ***\n10524 1.0000 0.6400 0.800   0.001 ***\n\n Group 6+20+27  #sps.  39 \n          A      B  stat p.value    \n58   0.9972 1.0000 0.999   0.001 ***\n154  0.9921 1.0000 0.996   0.001 ***\n44   0.9921 1.0000 0.996   0.001 ***\n226  0.9853 1.0000 0.993   0.001 ***\n145  0.9672 1.0000 0.983   0.001 ***\n243  0.9982 0.9615 0.980   0.001 ***\n101  0.9595 1.0000 0.980   0.001 ***\n160  0.9973 0.9615 0.979   0.001 ***\n711  0.9966 0.9615 0.979   0.001 ***\n75   0.9938 0.9615 0.978   0.001 ***\n196  0.9506 1.0000 0.975   0.001 ***\n108  0.9473 1.0000 0.973   0.001 ***\n1300 0.9792 0.9615 0.970   0.001 ***\n1168 0.9783 0.9615 0.970   0.001 ***\n115  1.0000 0.9231 0.961   0.001 ***\n781  1.0000 0.9231 0.961   0.001 ***\n733  0.9797 0.9231 0.951   0.001 ***\n415  0.9404 0.9615 0.951   0.001 ***\n770  0.9016 1.0000 0.950   0.001 ***\n1032 1.0000 0.8846 0.941   0.001 ***\n202  0.9919 0.8846 0.937   0.001 ***\n355  0.9906 0.8846 0.936   0.001 ***\n195  0.9901 0.8846 0.936   0.001 ***\n888  0.9898 0.8846 0.936   0.001 ***\n667  0.9807 0.8846 0.931   0.001 ***\n998  0.9798 0.8846 0.931   0.001 ***\n1265 0.9787 0.8846 0.930   0.001 ***\n658  0.9773 0.8846 0.930   0.001 ***\n3389 0.9705 0.8846 0.927   0.001 ***\n255  0.9966 0.8462 0.918   0.001 ***\n1188 0.9912 0.8462 0.916   0.001 ***\n246  0.9863 0.8462 0.914   0.001 ***\n706  1.0000 0.8077 0.899   0.001 ***\n1301 0.9908 0.8077 0.895   0.001 ***\n1198 0.9813 0.8077 0.890   0.001 ***\n1568 0.9799 0.8077 0.890   0.001 ***\n1785 1.0000 0.7692 0.877   0.001 ***\n2952 1.0000 0.7308 0.855   0.001 ***\n1652 1.0000 0.7308 0.855   0.001 ***\n\n Group 13+20+27  #sps.  24 \n          A      B  stat p.value    \n94   0.9956 1.0000 0.998   0.001 ***\n463  0.9838 1.0000 0.992   0.001 ***\n412  0.9823 1.0000 0.991   0.001 ***\n740  0.9738 1.0000 0.987   0.001 ***\n292  0.9653 1.0000 0.982   0.001 ***\n2264 0.9613 1.0000 0.980   0.001 ***\n1071 0.9592 1.0000 0.979   0.001 ***\n1377 0.9928 0.9630 0.978   0.001 ***\n1787 0.9529 1.0000 0.976   0.001 ***\n331  0.9513 1.0000 0.975   0.001 ***\n802  0.9511 1.0000 0.975   0.001 ***\n678  0.9808 0.9630 0.972   0.001 ***\n1104 0.9319 1.0000 0.965   0.001 ***\n840  0.9643 0.9630 0.964   0.001 ***\n1775 0.9191 1.0000 0.959   0.001 ***\n1256 0.9872 0.9259 0.956   0.001 ***\n2373 0.9369 0.9630 0.950   0.001 ***\n589  0.9276 0.9630 0.945   0.001 ***\n2139 1.0000 0.8519 0.923   0.001 ***\n3485 0.9802 0.8519 0.914   0.001 ***\n1330 0.9219 0.8889 0.905   0.001 ***\n1156 1.0000 0.7778 0.882   0.001 ***\n2778 1.0000 0.7778 0.882   0.001 ***\n2404 1.0000 0.7037 0.839   0.001 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n```\n\n\n:::\n\n```{.r .cell-code}\n#change index column values if index=1 then change to AD-Fall etc\ntss_sig.otus <- indval_tss$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                             index == 2 ~ \"Spring\",\n                                                             index == 3 ~ \"Summer\",\n                                                             index == 4 ~ \"Winter\",\n                                                             index == 5 ~ \"Fall-Spring\",\n                                                             index == 6 ~ \"Fall-Summer\",\n                                                             index == 7 ~ \"Fall-Winter\",\n                                                             index == 8 ~ \"Spring-Summer\",\n                                                             index == 9 ~ \"Spring-Winter\",\n                                                             index == 10 ~ \"Summer-Winter\",\n                                                             index == 11 ~ \"Fall-Spring-Summer\",\n                                                             index == 12 ~ \"Fall-Spring-Winter\",\n                                                             index == 13 ~ \"Fall-Summer-Winter\",\n                                                             index == 14 ~ \"Spring-Summer-Winter\",\n                                                             index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\ntss_sig.otus <- tss_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))\n\ngrouped_list_tss <- tss_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(Value))\n\nfall_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Fall\"][[1]]\nspring_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Spring\"][[1]]\nsummer_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Summer\"][[1]]\nwinter_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Winter\"][[1]]\nfall_spring_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Spring\"][[1]]\nfall_summer_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Summer\"][[1]]\nfall_winter_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Winter\"][[1]]\nspring_summer_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Spring-Summer\"][[1]]\nspring_winter_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Spring-Winter\"][[1]]\nsummer_winter_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Summer-Winter\"][[1]]\nfall_spring_summer_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Spring-Summer\"][[1]]\nfall_spring_winter_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Spring-Winter\"][[1]]\nfall_summer_winter_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Summer-Winter\"][[1]]\nspring_summer_winter_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Spring-Summer-Winter\"][[1]]\n#fall_spring_summer_winter_tss <- grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Spring-Summer-Winter\"][[1]]\n\n\n# Define the sizes of each set and their intersections\nset_sizes_tss <- c(\n  Fall = tss_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = tss_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = tss_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = tss_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = tss_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = tss_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = tss_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = tss_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = tss_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = tss_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring-Summer\" = tss_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring-Winter\" = tss_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer-Winter\" = tss_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = tss_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = tss_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_tss <- filter_data(set_sizes_tss)\n\n# Create the Euler diagram\nfit_tss <- euler(filtered_data_tss)\n\n# Plot the Euler diagram\nplot(fit_tss, labels = list(fontfamily = \"serif\"),\n     quantities = list(type = \"counts\", font = 3), main = \"Seasonal Comparison of Indicator Species in TSS system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n### WAS\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#WAS\ngroupings = was_df$Group\nindval_was <- multipatt(was_df[,c(2:ncol(was_df))], groupings, \n                        control = how(nperm=999),duleg = FALSE)\n\n#change index column values if index=1 then change to AD-Fall etc\nwas_sig.otus <- indval_was$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                             index == 2 ~ \"Spring\",\n                                                             index == 3 ~ \"Summer\",\n                                                             index == 4 ~ \"Winter\",\n                                                             index == 5 ~ \"Fall-Spring\",\n                                                             index == 6 ~ \"Fall-Summer\",\n                                                             index == 7 ~ \"Fall-Winter\",\n                                                             index == 8 ~ \"Spring-Summer\",\n                                                             index == 9 ~ \"Spring-Winter\",\n                                                             index == 10 ~ \"Summer-Winter\",\n                                                             index == 11 ~ \"Fall-Spring-Summer\",\n                                                             index == 12 ~ \"Fall-Spring-Winter\",\n                                                             index == 13 ~ \"Fall-Summer-Winter\",\n                                                             index == 14 ~ \"Spring-Summer-Winter\",\n                                                             index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\nwas_sig.otus <- was_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))\n\n#create a new dataframe for each unique index value\n\ngrouped_list_was <- was_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(Value))\n\nfall_was <- grouped_list_was$Values[grouped_list_was$index == \"Fall\"][[1]]\nspring_was <- grouped_list_was$Values[grouped_list_was$index == \"Spring\"][[1]]\nsummer_was <- grouped_list_was$Values[grouped_list_was$index == \"Summer\"][[1]]\nwinter_was <- grouped_list_was$Values[grouped_list_was$index == \"Winter\"][[1]]\nfall_spring_was <- grouped_list_was$Values[grouped_list_was$index == \"Fall-Spring\"][[1]]\nfall_summer_was <- grouped_list_was$Values[grouped_list_was$index == \"Fall-Summer\"][[1]]\nfall_winter_was <- grouped_list_was$Values[grouped_list_was$index == \"Fall-Winter\"][[1]]\nspring_summer_was <- grouped_list_was$Values[grouped_list_was$index == \"Spring-Summer\"][[1]]\nspring_winter_was <- grouped_list_was$Values[grouped_list_was$index == \"Spring-Winter\"][[1]]\nsummer_winter_was <- grouped_list_was$Values[grouped_list_was$index == \"Summer-Winter\"][[1]]\nfall_spring_summer_was <- grouped_list_was$Values[grouped_list_was$index == \"Fall-Spring-Summer\"][[1]]\nfall_spring_winter_was <- grouped_list_was$Values[grouped_list_was$index == \"Fall-Spring-Winter\"][[1]]\nfall_summer_winter_was <- grouped_list_was$Values[grouped_list_was$index == \"Fall-Summer-Winter\"][[1]]\nspring_summer_winter_was <- grouped_list_was$Values[grouped_list_was$index == \"Spring-Summer-Winter\"][[1]]\n#fall_spring_summer_winter_was <- grouped_list_was$Values[grouped_list_was$index == \"Fall-Spring-Summer-Winter\"][[1]]\n\n\n# Define the sizes of each set and their intersections\nset_sizes_was <- c(\n  Fall = was_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = was_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = was_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = was_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = was_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = was_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = was_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = was_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = was_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = was_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring-Summer\" = was_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring-Winter\" = was_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer-Winter\" = was_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = was_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = was_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_was <- filter_data(set_sizes_was)\n\n# Create the Euler diagram\nfit_was <- euler(filtered_data_was)\n\n# Plot the Euler diagram\nplot(fit_was, labels = list(fontfamily = \"serif\"),\n     quantities = list(type = \"counts\", font = 3), main = \"Seasonal Comparison of Indicator Species in WAS system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}