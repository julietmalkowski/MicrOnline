{
  "hash": "2c245ddd780bc3552df61b3877361f4a",
  "result": {
    "engine": "knitr",
    "markdown": "# Indicator Species\n\nLoading dependencies\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(indicspecies)\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(ape)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(ggvenn)\nlibrary(fmsb)\nlibrary(eulerr)\nlibrary(plotly)\n```\n:::\n\n\n\n\n## Analysis on the 7 wwtp processes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabundance_table <- read_excel(\"/Users/julietmalkowski/Desktop/Research/Kinetic_Model/abundance_table.xlsx\")\n\n#remove first 4 characters in every column name\ncolnames(abundance_table)<- substr(colnames(abundance_table), 5, nchar(colnames(abundance_table)))\nabundance_table = as.data.frame(abundance_table)\n#split first column by character '_' into two seperate columns\nabundance_table[c('Process', 'Date')] <- str_split_fixed(abundance_table$le, '_', 2)\n#drop le column\nabundance_table = abundance_table[,-1]\n#move last two columns to the front\nabundance_table <- abundance_table %>%\n  select(Process, everything())\nabundance_table <- abundance_table %>%\n  select(Date, everything())\n\n#split first column by character '_' into two separate columns\nabundance_table[c('Month', 'Year')] <- str_split_fixed(abundance_table$Date, '/', 2)\nabundance_table <- abundance_table %>%\n  select(Month, everything())\n#turn Month column into numeric\nabundance_table$Month <- as.numeric(abundance_table$Month)\n#Change AS-1 and AS-2 to AS\nabundance_table$Process <- gsub(\"AS-1\", \"AS\", abundance_table$Process)\nabundance_table$Process <- gsub(\"AS-2\", \"AS\", abundance_table$Process)\n\n\n### Looking at each process\n# Codes for each group:\n# AD = 1\n# AS = 2\n# Eff = 3\n# Inf = 4\n# TF = 5\n# TSS = 6\n# WAS = 7\n\n#Replace process names with codes\nabundance_table$Process <- gsub(\"AD\", \"1\", abundance_table$Process)\nabundance_table$Process <- gsub(\"AS\", \"2\", abundance_table$Process)\nabundance_table$Process <- gsub(\"Eff\", \"3\", abundance_table$Process)\nabundance_table$Process <- gsub(\"Inf\", \"4\", abundance_table$Process)\nabundance_table$Process <- gsub(\"TF\", \"5\", abundance_table$Process)\nabundance_table$Process <- gsub(\"TSS\", \"6\", abundance_table$Process)\nabundance_table$Process <- gsub(\"W2\", \"7\", abundance_table$Process)\n\ndf1 <- abundance_table %>%\n  select(-Year, -Date,-Month)\n\n#Running Indicator Species Analysis\ngroupings = df1$Process\n\n#duleg = TRUE which means that site group combinations will not be considered\nindval <- multipatt(df1[,c(2:ncol(df1))], groupings, \n                    control = how(nperm=999),duleg = TRUE) \n\nsig.otus <- indval$sign %>% mutate(otu = rownames(.)) %>% filter(p.value < 0.01) %>% filter(stat > 0.5)\n\nsig.otus <- indval$sign %>% mutate(index = case_when(index == 1 ~ \"AD\",\n                                                           index == 2 ~ \"AS\",\n                                                           index == 3 ~ \"Eff\",\n                                                           index == 4 ~ \"Inf\",\n                                                           index == 5 ~ \"TF\",\n                                                           index == 6 ~ \"TSS\",\n                                                           index == 7 ~ \"WAS\"))\n\nsig.otus <- sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(OTU = paste0(\"Zotu\",otu)) \n```\n:::\n\n\n\n\n### Attaching taxonomic informaiton to indicator species in each group\nShown by variables: ad, as, eff, inf, tf, tss, and was\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntaxa = read_excel(\"/Users/julietmalkowski/Desktop/Research/Kinetic_Model/tax.xlsx\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nâ€¢ `` -> `...1`\n```\n\n\n:::\n\n```{.r .cell-code}\nmerged_df <- merge(sig.otus, taxa[, c(\"OTU\", \"genus\")], by = \"OTU\")\n\n#create a new dataframe for each unique index value\n\ngrouped_list <- merged_df %>%\n  group_by(index) %>%\n  summarize(Values = list(genus))\n\nad <- unique(grouped_list$Values[grouped_list$index == \"AD\"][[1]])\nas <- unique(grouped_list$Values[grouped_list$index == \"AS\"][[1]])\neff <- unique(grouped_list$Values[grouped_list$index == \"Eff\"][[1]])\ninf <- unique(grouped_list$Values[grouped_list$index == \"Inf\"][[1]])\ntf <- unique(grouped_list$Values[grouped_list$index == \"TF\"][[1]])\ntss <- unique(grouped_list$Values[grouped_list$index == \"TSS\"][[1]])\nwas <- unique(grouped_list$Values[grouped_list$index == \"WAS\"][[1]])\n```\n:::\n\n\n\n\n#### AD Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(ad)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"Fervidobacterium\"                     \n  [2] \"Clostridia_vadinBB60_group\"           \n  [3] \"uncultured\"                           \n  [4] \"Hydrogenispora\"                       \n  [5] \"Luteolibacter\"                        \n  [6] \"D8A-2\"                                \n  [7] \"Ruminiclostridium\"                    \n  [8] \"Dethiobacter\"                         \n  [9] \"Hungateiclostridiaceae\"               \n [10] \"Limnochordaceae\"                      \n [11] \"Caldicoprobacter\"                     \n [12] \"IheB3-7\"                              \n [13] \"Cloacibacterium\"                      \n [14] \"JGI-0000079-D21\"                      \n [15] \"Edaphobaculum\"                        \n [16] \"Tepidimicrobium\"                      \n [17] \"Keratinibaculum\"                      \n [18] \"Defluviitoga\"                         \n [19] \"Monoglobus\"                           \n [20] \"Acetomicrobium\"                       \n [21] \"Herbinix\"                             \n [22] \"Syntrophaceticus\"                     \n [23] \"Aminicenantales\"                      \n [24] \"Pelotomaculum\"                        \n [25] \"Candidatus_Soleaferrea\"               \n [26] \"Coprothermobacter\"                    \n [27] \"Devosia\"                              \n [28] \"Thermoclostridium\"                    \n [29] \"Flavobacterium\"                       \n [30] \"Candidatus_Caldatribacterium\"         \n [31] \"HN-HF0106\"                            \n [32] \"Sporanaerobacter\"                     \n [33] \"Hungateiclostridium\"                  \n [34] \"MBA03\"                                \n [35] \"Syntrophomonas\"                       \n [36] \"Imtechella\"                           \n [37] \"Lutispora\"                            \n [38] \"Acinetobacter\"                        \n [39] \"DTU014\"                               \n [40] \"RF39\"                                 \n [41] \"Candidatus_Accumulibacter\"            \n [42] \"AKYH767\"                              \n [43] \"Proteiniborus\"                        \n [44] \"Lactococcus\"                          \n [45] \"Lentimicrobium\"                       \n [46] \"Beggiatoa\"                            \n [47] \"Tepidanaerobacter\"                    \n [48] \"Paludibacter\"                         \n [49] \"Dechloromonas\"                        \n [50] \"PeM15\"                                \n [51] \"Desulfitibacter\"                      \n [52] \"Thermogutta\"                          \n [53] \"Streptococcus\"                        \n [54] \"[Eubacterium]_coprostanoligenes_group\"\n [55] \"Gelria\"                               \n [56] \"[Ruminococcus]_torques_group\"         \n [57] \"Dictyoglomus\"                         \n [58] \"Deinococcus\"                          \n [59] \"Brooklawnia\"                          \n [60] \"Rhizobacter\"                          \n [61] \"Rhodobacter\"                          \n [62] \"Defluviitalea\"                        \n [63] \"Zoogloea\"                             \n [64] \"Crassaminicella\"                      \n [65] \"Aquabacterium\"                        \n [66] \"Propioniciclava\"                      \n [67] \"NK4A214_group\"                        \n [68] \"Runella\"                              \n [69] \"Ferribacterium\"                       \n [70] \"UCG-010\"                              \n [71] \"Pla1_lineage\"                         \n [72] \"Bifidobacterium\"                      \n [73] \"Haliscomenobacter\"                    \n [74] \"Leucobacter\"                          \n [75] \"Lentimicrobiaceae\"                    \n [76] \"Macellibacteroides\"                   \n [77] \"Saccharimonadales\"                    \n [78] \"BSV13\"                                \n [79] \"alphaI_cluster\"                       \n [80] \"Acidibacter\"                          \n [81] \"Izemoplasmatales\"                     \n [82] \"Symbiobacterium\"                      \n [83] \"Limnohabitans\"                        \n [84] \"Ga0077536\"                            \n [85] \"Pseudarcobacter\"                      \n [86] \"Proteiniphilum\"                       \n [87] \"0319-6G20\"                            \n [88] \"Williamwhitmania\"                     \n [89] \"Bacteroides\"                          \n [90] \"KD1-131\"                              \n [91] \"Alkanindiges\"                         \n [92] \"CL500-29_marine_group\"                \n [93] \"Methylotenera\"                        \n [94] \"UBA10353_marine_group\"                \n [95] \"Pseudomonas\"                          \n [96] \"mle1-27\"                              \n [97] \"Acidovorax\"                           \n [98] \"SBR1031\"                              \n [99] \"Sphingoaurantiacus\"                   \n[100] \"UCG-012\"                              \n[101] \"Candidatus_Moranbacteria\"             \n[102] \"37-13\"                                \n[103] \"Fluviicola\"                           \n[104] \"[Agitococcus]_lubricus_group\"         \n[105] \"Trichococcus\"                         \n[106] \"Leptotrichia\"                         \n[107] \"NS11-12_marine_group\"                 \n[108] \"Romboutsia\"                           \n[109] \"Novosphingobium\"                      \n[110] \"Diaphorobacter\"                       \n[111] \"Ottowia\"                              \n[112] \"BRH-c20a\"                             \n[113] \"[Ruminococcus]_gnavus_group\"          \n[114] \"Candidatus_Megaira\"                   \n[115] \"Moraxella\"                            \n[116] \"Comamonas\"                            \n[117] \"Citrobacter\"                          \n[118] \"Tolumonas\"                            \n[119] \"Micropruina\"                          \n[120] \"Microbacterium\"                       \n[121] \"Arsenicicoccus\"                       \n[122] \"Anaerolineaceae_UCG-001\"              \n[123] \"Candidatus_Hydrogenedens\"             \n[124] \"Raoultella\"                           \n[125] \"Mycobacterium\"                        \n[126] \"Syntrophorhabdus\"                     \n[127] \"Hydrogenedensaceae\"                   \n[128] \"Shinella\"                             \n[129] \"Thermomonas\"                          \n[130] \"Marmoricola\"                          \n[131] \"Thiobacillus\"                         \n[132] \"Amaricoccus\"                          \n[133] \"Mitochondria\"                         \n[134] \"B55-F-B-G02\"                          \n[135] \"Bdellovibrio\"                         \n[136] \"Hydrothermae\"                         \n[137] \"Syntrophothermus\"                     \n[138] \"Enterobacter\"                         \n[139] \"Lacihabitans\"                         \n[140] \"Sphingomonas\"                         \n[141] \"MSBL3\"                                \n[142] \"Aeromonas\"                            \n[143] \"Haliangium\"                           \n[144] \"Thermanaerovibrio\"                    \n[145] \"Paucibacter\"                          \n[146] \"Bacteroidetes_vadinHA17\"              \n[147] \"Limnochordia\"                         \n[148] \"Faecalibacterium\"                     \n[149] \"Mesorhizobium\"                        \n[150] \"Propionicimonas\"                      \n[151] \"Propionicicella\"                      \n[152] \"env.OPS_17\"                           \n[153] \"Clostridium_sensu_stricto_8\"          \n[154] \"Hyphomicrobium\"                       \n[155] \"Paracoccus\"                           \n[156] \"Ruminococcus\"                         \n[157] \"Gordonia\"                             \n[158] \"SM2D12\"                               \n[159] \"AKIW659\"                              \n[160] \"Conexibacter\"                         \n[161] \"Candidatus_Captivus\"                  \n[162] \"Arcobacter\"                           \n[163] \"RBG-16-49-21\"                         \n[164] \"Clostridium_sensu_stricto_1\"          \n[165] \"Ochrobactrum\"                         \n[166] \"Family_XIII_AD3011_group\"             \n[167] \"Pleomorphomonas\"                      \n[168] \"Kapabacteriales\"                      \n[169] \"Acetobacteroides\"                     \n[170] \"Fusicatenibacter\"                     \n[171] \"Thiothrix\"                            \n[172] \"Vogesella\"                            \n[173] \"Gastranaerophilales\"                  \n[174] \"Propionivibrio\"                       \n[175] \"Blautia\"                              \n[176] \"Tetrasphaera\"                         \n[177] \"Empedobacter\"                         \n[178] \"Laribacter\"                           \n[179] \"Lachnospiraceae_ND3007_group\"         \n[180] \"Ellin516\"                             \n[181] \"Pelosinus\"                            \n[182] \"SD04E11\"                              \n[183] \"Erysipelothrix\"                       \n[184] \"Curvibacter\"                          \n[185] \"Intestinibacter\"                      \n[186] \"Opitutus\"                             \n[187] \"Thauera\"                              \n[188] \"Aestuariimicrobium\"                   \n[189] \"WS1\"                                  \n[190] \"LCP-89\"                               \n[191] \"Chryseobacterium\"                     \n[192] \"Chthonomonadales\"                     \n[193] \"Kluyvera\"                             \n[194] \"Sphingobium\"                          \n[195] \"M55-D21\"                              \n[196] \"Rhodoferax\"                           \n[197] \"Turicibacter\"                         \n[198] \"Subdoligranulum\"                      \n[199] \"Geothrix\"                             \n[200] \"UCG-002\"                              \n[201] \"Christensenellaceae_R-7_group\"        \n[202] \"053A03-B-DI-P58\"                      \n[203] \"Megamonas\"                            \n[204] \"Moorella\"                             \n```\n\n\n:::\n:::\n\n\n\n#### AS Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(as)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"uncultured\"                   \"Sphaerotilus\"                \n [3] \"Novosphingobium\"              \"[Agitococcus]_lubricus_group\"\n [5] \"WCHB1-32\"                     \"Sericytochromatia\"           \n [7] \"Zoogloea\"                     \"Fluviicoccus\"                \n [9] \"Methylorosula\"                \"Hydrogenophaga\"              \n[11] \"Edaphobaculum\"                \"Rhodoferax\"                  \n[13] \"Candidatus_Accumulibacter\"    \"Lentimicrobiaceae\"           \n[15] \"Pajaroellobacter\"             \"DEV114\"                      \n[17] \"Flavobacterium\"               \"Dechloromonas\"               \n[19] \"Ferruginibacter\"              \"Haliangium\"                  \n[21] \"37-13\"                        \"Sphingobium\"                 \n[23] \"env.OPS_17\"                   \"Methyloversatilis\"           \n[25] \"Leptothrix\"                   \"Ferribacterium\"              \n[27] \"Bacteriovorax\"                \"Hylemonella\"                 \n[29] \"Methylotenera\"                \"Sulfuritalea\"                \n[31] \"Simplicispira\"                \"Nannocystis\"                 \n[33] \"AAP99\"                        \"Halomonas\"                   \n```\n\n\n:::\n:::\n\n\n\n#### Eff Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(eff)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Pseudomonas\"                                       \n [2] \"Aquaspirillum\"                                     \n [3] \"Clostridium_sensu_stricto_12\"                      \n [4] \"Acinetobacter\"                                     \n [5] \"Rhodoferax\"                                        \n [6] \"Imtechella\"                                        \n [7] \"Edaphobaculum\"                                     \n [8] \"Babeliales\"                                        \n [9] \"Giesbergeria\"                                      \n[10] \"JTB23\"                                             \n[11] \"uncultured\"                                        \n[12] \"Trichococcus\"                                      \n[13] \"Flavobacterium\"                                    \n[14] \"Lactococcus\"                                       \n[15] \"Megamonas\"                                         \n[16] \"Limnohabitans\"                                     \n[17] \"Sphingobium\"                                       \n[18] \"Chloroplast\"                                       \n[19] \"Pelosinus\"                                         \n[20] \"Polynucleobacter\"                                  \n[21] \"Allobacillus\"                                      \n[22] \"Hydrogenophaga\"                                    \n[23] \"Ottowia\"                                           \n[24] \"Candidatus_Paracaedibacter\"                        \n[25] \"env.OPS_17\"                                        \n[26] \"Pelomonas\"                                         \n[27] \"Comamonas\"                                         \n[28] \"Clostridium_sensu_stricto_1\"                       \n[29] \"Romboutsia\"                                        \n[30] \"Lachnospiraceae_ND3007_group\"                      \n[31] \"Victivallaceae\"                                    \n[32] \"Allorhizobium-Neorhizobium-Pararhizobium-Rhizobium\"\n[33] \"Prosthecobacter\"                                   \n[34] \"Pedobacter\"                                        \n[35] \"Paucibacter\"                                       \n[36] \"Aquabacterium\"                                     \n[37] \"SM2D12\"                                            \n[38] \"Unknown_Family\"                                    \n[39] \"Curvibacter\"                                       \n[40] \"Lysobacter\"                                        \n[41] \"Novosphingobium\"                                   \n[42] \"Mycobacterium\"                                     \n[43] \"GKS98_freshwater_group\"                            \n[44] \"Cloacibacterium\"                                   \n[45] \"Polaromonas\"                                       \n[46] \"Thiothrix\"                                         \n[47] \"TM7x\"                                              \n[48] \"Saccharimonadales\"                                 \n[49] \"Holdemanella\"                                      \n[50] \"Bdellovibrio\"                                      \n[51] \"Streptococcus\"                                     \n[52] \"RF39\"                                              \n[53] \"Mitochondria\"                                      \n[54] \"Coxiella\"                                          \n[55] \"Cephaloticoccus\"                                   \n[56] \"Gracilibacteria\"                                   \n[57] \"Leptothrix\"                                        \n[58] \"Rhodococcus\"                                       \n[59] \"Dechloromonas\"                                     \n[60] \"Acidovorax\"                                        \n[61] \"Propionivibrio\"                                    \n[62] \"Bact-08\"                                           \n[63] \"Lutispora\"                                         \n[64] \"Bifidobacterium\"                                   \n[65] \"Mitsuokella\"                                       \n[66] \"Candidatus_Gortzia\"                                \n[67] \"Alcaligenaceae\"                                    \n[68] \"Chryseobacterium\"                                  \n[69] \"Zoogloea\"                                          \n[70] \"Sulfuricurvum\"                                     \n[71] \"Fluviicola\"                                        \n[72] \"Sphingomonas\"                                      \n```\n\n\n:::\n:::\n\n\n\n#### Inf Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Faecalibacterium\"                     \n [2] \"Aeromonas\"                            \n [3] \"Hydrogenophaga\"                       \n [4] \"Prevotella\"                           \n [5] \"Janthinobacterium\"                    \n [6] \"Negativibacillus\"                     \n [7] \"Rivicola\"                             \n [8] \"Chryseobacterium\"                     \n [9] \"Pseudomonas\"                          \n[10] \"Arcobacter\"                           \n[11] \"Hypnocyclicus\"                        \n[12] \"Butyricicoccus\"                       \n[13] \"Parabacteroides\"                      \n[14] \"Roseburia\"                            \n[15] \"Flavobacterium\"                       \n[16] \"Subdoligranulum\"                      \n[17] \"Bacteroides\"                          \n[18] \"Lactococcus\"                          \n[19] \"Coprococcus\"                          \n[20] \"Leucobacter\"                          \n[21] \"Blautia\"                              \n[22] \"Tolumonas\"                            \n[23] \"UCG-002\"                              \n[24] \"Tyzzerella\"                           \n[25] \"[Eubacterium]_siraeum_group\"          \n[26] \"[Agitococcus]_lubricus_group\"         \n[27] \"Pseudarcobacter\"                      \n[28] \"Rhodoferax\"                           \n[29] \"Lachnospiraceae_NK4A136_group\"        \n[30] \"Comamonas\"                            \n[31] \"Coprothermobacter\"                    \n[32] \"uncultured\"                           \n[33] \"Propionivibrio\"                       \n[34] \"Lachnospira\"                          \n[35] \"Zoogloea\"                             \n[36] \"Formivibrio\"                          \n[37] \"Bifidobacterium\"                      \n[38] \"Macellibacteroides\"                   \n[39] \"Cloacibacterium\"                      \n[40] \"Sulfurospirillum\"                     \n[41] \"Microbacterium\"                       \n[42] \"Akkermansia\"                          \n[43] \"Acinetobacter\"                        \n[44] \"Monoglobus\"                           \n[45] \"Dorea\"                                \n[46] \"Phascolarctobacterium\"                \n[47] \"[Eubacterium]_coprostanoligenes_group\"\n[48] \"Erysipelotrichaceae_UCG-003\"          \n[49] \"Vogesella\"                            \n[50] \"Holdemanella\"                         \n[51] \"Lelliottia\"                           \n[52] \"Malikia\"                              \n[53] \"Sutterella\"                           \n[54] \"Raoultella\"                           \n[55] \"Microvirgula\"                         \n[56] \"Desulfovibrio\"                        \n[57] \"Catenisphaera\"                        \n[58] \"UCG-003\"                              \n[59] \"[Ruminococcus]_gauvreauii_group\"      \n[60] \"Incertae_Sedis\"                       \n[61] \"Oscillibacter\"                        \n[62] \"Rhodobacter\"                          \n[63] \"Shewanella\"                           \n[64] \"Ruminococcus\"                         \n[65] \"Agathobacter\"                         \n[66] \"Paludibacter\"                         \n[67] \"Mitochondria\"                         \n[68] \"Undibacterium\"                        \n[69] \"Collinsella\"                          \n[70] \"Dechloromonas\"                        \n```\n\n\n:::\n:::\n\n\n\n#### TF Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(tf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Pseudarcobacter\"                                   \n [2] \"Pseudomonas\"                                       \n [3] \"Zoogloea\"                                          \n [4] \"FTLpost3\"                                          \n [5] \"uncultured\"                                        \n [6] \"Flavobacterium\"                                    \n [7] \"Absconditabacteriales_\"                            \n [8] \"Bergeyella\"                                        \n [9] \"Leeia\"                                             \n[10] \"Hydrogenophaga\"                                    \n[11] \"BSV13\"                                             \n[12] \"Chryseobacterium\"                                  \n[13] \"Novosphingobium\"                                   \n[14] \"Beggiatoaceae\"                                     \n[15] \"Undibacterium\"                                     \n[16] \"Dechloromonas\"                                     \n[17] \"Acinetobacter\"                                     \n[18] \"Bacteroides\"                                       \n[19] \"Prevotella\"                                        \n[20] \"Terrimonas\"                                        \n[21] \"Lachnospira\"                                       \n[22] \"Agathobacter\"                                      \n[23] \"Collinsella\"                                       \n[24] \"Allobacillus\"                                      \n[25] \"Acidovorax\"                                        \n[26] \"Simplicispira\"                                     \n[27] \"Paludibacter\"                                      \n[28] \"Soonwooa\"                                          \n[29] \"Geobacter\"                                         \n[30] \"Fusibacter\"                                        \n[31] \"T34\"                                               \n[32] \"Sulfuricurvum\"                                     \n[33] \"Lactococcus\"                                       \n[34] \"GWE2-42-42\"                                        \n[35] \"Rivicola\"                                          \n[36] \"Thiothrix\"                                         \n[37] \"Comamonas\"                                         \n[38] \"KD1-131\"                                           \n[39] \"Allorhizobium-Neorhizobium-Pararhizobium-Rhizobium\"\n[40] \"Erysipelotrichaceae_UCG-003\"                       \n[41] \"Mariprofundus\"                                     \n[42] \"Ruminococcus\"                                      \n[43] \"Janthinobacterium\"                                 \n[44] \"LCP-89\"                                            \n[45] \"Dialister\"                                         \n[46] \"Akkermansia\"                                       \n[47] \"Quatrionicoccus\"                                   \n[48] \"Rhodoferax\"                                        \n[49] \"Polaromonas\"                                       \n[50] \"Williamwhitmania\"                                  \n[51] \"Cloacibacterium\"                                   \n[52] \"Aeromonas\"                                         \n[53] \"Alistipes\"                                         \n[54] \"Coprothermobacter\"                                 \n[55] \"Fonticella\"                                        \n[56] \"Aquabacterium\"                                     \n[57] \"env.OPS_17\"                                        \n[58] \"Propionivibrio\"                                    \n[59] \"Candidatus_Accumulibacter\"                         \n[60] \"M2PB4-65_termite_group\"                            \n[61] \"Diaphorobacter\"                                    \n[62] \"[Cytophaga]_xylanolytica_group\"                    \n[63] \"WCHB1-32\"                                          \n[64] \"Erysipelothrix\"                                    \n[65] \"Lachnospiraceae_NK4A136_group\"                     \n[66] \"Alkanindiges\"                                      \n```\n\n\n:::\n:::\n\n\n\n#### TSS Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(tss)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Zoogloea\"                                          \n [2] \"Pelosinus\"                                         \n [3] \"Prevotella\"                                        \n [4] \"Bacteroides\"                                       \n [5] \"Moraxella\"                                         \n [6] \"uncultured\"                                        \n [7] \"PeM15\"                                             \n [8] \"Paludibacter\"                                      \n [9] \"Weeksellaceae\"                                     \n[10] \"Enterobacter\"                                      \n[11] \"XBB1006\"                                           \n[12] \"Streptococcus\"                                     \n[13] \"Comamonas\"                                         \n[14] \"Clostridium_sensu_stricto_1\"                       \n[15] \"Cloacibacterium\"                                   \n[16] \"Clostridium_sensu_stricto_12\"                      \n[17] \"Sulfurospirillum\"                                  \n[18] \"Brachymonas\"                                       \n[19] \"Klebsiella\"                                        \n[20] \"Clostridium_sensu_stricto_13\"                      \n[21] \"Sebaldella\"                                        \n[22] \"Vitreoscilla\"                                      \n[23] \"Diaphorobacter\"                                    \n[24] \"Pseudarcobacter\"                                   \n[25] \"Ottowia\"                                           \n[26] \"Sphaerotilus\"                                      \n[27] \"Raoultella\"                                        \n[28] \"Alkanindiges\"                                      \n[29] \"Eubacterium\"                                       \n[30] \"Chryseobacterium\"                                  \n[31] \"Mycobacterium\"                                     \n[32] \"Macellibacteroides\"                                \n[33] \"Empedobacter\"                                      \n[34] \"Veillonella\"                                       \n[35] \"Propionispira\"                                     \n[36] \"Laribacter\"                                        \n[37] \"Paracoccus\"                                        \n[38] \"Stenoxybacter\"                                     \n[39] \"[Agitococcus]_lubricus_group\"                      \n[40] \"Nakamurella\"                                       \n[41] \"Uruburuella\"                                       \n[42] \"Clostridium_sensu_stricto_7\"                       \n[43] \"Novosphingobium\"                                   \n[44] \"Leptotrichia\"                                      \n[45] \"Propioniciclava\"                                   \n[46] \"Pleomorphomonas\"                                   \n[47] \"T34\"                                               \n[48] \"Dysgonomonas\"                                      \n[49] \"Butyrivibrio\"                                      \n[50] \"Propionivibrio\"                                    \n[51] \"Incertae_Sedis\"                                    \n[52] \"Uliginosibacterium\"                                \n[53] \"Tolumonas\"                                         \n[54] \"Neisseria\"                                         \n[55] \"Geobacter\"                                         \n[56] \"Anaerospora\"                                       \n[57] \"Arcobacter\"                                        \n[58] \"Shuttleworthia\"                                    \n[59] \"Citrobacter\"                                       \n[60] \"Acidovorax\"                                        \n[61] \"Christensenellaceae_R-7_group\"                     \n[62] \"Rivicola\"                                          \n[63] \"Desulfovibrio\"                                     \n[64] \"Niveibacterium\"                                    \n[65] \"Micropruina\"                                       \n[66] \"Rhizorhapis\"                                       \n[67] \"Sulfurovum\"                                        \n[68] \"Chelonobacter\"                                     \n[69] \"Saccharimonadales\"                                 \n[70] \"Dechloromonas\"                                     \n[71] \"Anaeromusa-Anaeroarcus\"                            \n[72] \"Phenylobacterium\"                                  \n[73] \"Aquaspirillum\"                                     \n[74] \"Flavobacterium\"                                    \n[75] \"Candidatus_Accumulibacter\"                         \n[76] \"alphaI_cluster\"                                    \n[77] \"Acinetobacter\"                                     \n[78] \"Azorhizobium\"                                      \n[79] \"Coprothermobacter\"                                 \n[80] \"Aeromonas\"                                         \n[81] \"Luteococcus\"                                       \n[82] \"Tessaracoccus\"                                     \n[83] \"Gemmobacter\"                                       \n[84] \"Sphingomonas\"                                      \n[85] \"Kluyvera\"                                          \n[86] \"Yersinia\"                                          \n[87] \"Pseudorhodobacter\"                                 \n[88] \"Thauera\"                                           \n[89] \"Allorhizobium-Neorhizobium-Pararhizobium-Rhizobium\"\n[90] \"Pasteurella\"                                       \n[91] \"Enhydrobacter\"                                     \n[92] \"Peptostreptococcus\"                                \n[93] \"Paludibacterium\"                                   \n[94] \"KD1-131\"                                           \n[95] \"Acidaminococcus\"                                   \n[96] \"Formivibrio\"                                       \n[97] \"Lactococcus\"                                       \n```\n\n\n:::\n:::\n\n\n\n\n#### WAS Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(was)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Cephaloticoccus\"               \"Thiothrix\"                    \n [3] \"uncultured\"                    \"Rhodoferax\"                   \n [5] \"Zoogloea\"                      \"WCHB1-32\"                     \n [7] \"NS11-12_marine_group\"          \"Fluviicoccus\"                 \n [9] \"Sericytochromatia\"             \"Comamonas\"                    \n[11] \"Phreatobacter\"                 \"Rurimicrobium\"                \n[13] \"Luteolibacter\"                 \"Novosphingobium\"              \n[15] \"Hydrogenophaga\"                \"Pajaroellobacter\"             \n[17] \"Roseomonas\"                    \"Limnohabitans\"                \n[19] \"Arcicella\"                     \"Phaselicystis\"                \n[21] \"Candidatus_Electronema\"        \"Aquabacterium\"                \n[23] \"Hydrogenedensaceae\"            \"Haliangium\"                   \n[25] \"Ottowia\"                       \"env.OPS_17\"                   \n[27] \"Sphingobium\"                   \"Dechloromonas\"                \n[29] \"Aquimonas\"                     \"37-13\"                        \n[31] \"Gemmatimonas\"                  \"mle1-27\"                      \n[33] \"Thermomonas\"                   \"[Agitococcus]_lubricus_group\" \n[35] \"Christensenellaceae_R-7_group\" \"Ferribacterium\"               \n[37] \"Flavobacterium\"                \"Desulfomicrobium\"             \n[39] \"Pseudorhodobacter\"             \"Lentimicrobiaceae\"            \n[41] \"Tetrasphaera\"                  \"Pelomonas\"                    \n[43] \"Paludibacter\"                  \"Ferruginibacter\"              \n[45] \"Opitutus\"                      \"M2PB4-65_termite_group\"       \n[47] \"Prosthecobacter\"               \"Geothrix\"                     \n[49] \"Alkanindiges\"                  \"SH-PL14\"                      \n[51] \"Leptothrix\"                   \n```\n\n\n:::\n:::\n\n\n\n\n## Looking at different seasons for each process\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassign_season <- function(Month) {\n  if (Month %in% c(12, 01, 02)) {\n    return(\"Winter\")\n  } else if (Month %in% c(03, 04, 05)) {\n    return(\"Spring\")\n  } else if (Month %in% c(06, 07, 08)) {\n    return(\"Summer\")\n  } else if (Month %in% c(09, 10, 11)) {\n    return(\"Fall\")\n  } else {\n    return(NA)\n  }\n}\n\ndf <- abundance_table %>%\n  mutate(Season = sapply(Month, assign_season)) %>%\n  group_by(Season, Process) %>%\n  mutate(Group = cur_group_id()) %>%\n  ungroup()\n\ndf <- df %>% select(Group,Process, Season, Month, everything())\n\n#Codes for each group:\n# AD-Fall = 1\n# AS-Fall = 2\n# Eff-Fall = 3\n# Inf-Fall = 4\n# TF-Fall = 5\n# TSS_Fall = 6\n# WAS-Fall = 7\n# AD-Spring = 8\n# AS-Spring = 9\n# Eff-Spring = 10\n# Inf-Spring = 11\n# TF-Spring = 12\n# TSS-Spring = 13\n# WAS-Spring = 14\n# AD-Summer = 15\n# AS-Summer = 16\n# Eff-Summer = 17\n# Inf-Summer = 18\n# TF-Summer = 19\n# TSS-Summer = 20\n# WAS-Summer = 21\n# AD-Winter = 22\n# AS-Winter = 23\n# Eff-Winter = 24\n# Inf-Winter = 25\n# TF-Winter = 26\n# TSS-Winter = 27\n# WAS-Winter = 28\n\n#Now we have our dataframe that contains a unique group number for each process and season\ndf <- df %>%\n  select(-Year, -Process, -Date, -Season, -Month)\n\n#Species groups\nAD = c(1, 8, 15, 22)\nAS = c(2, 9, 16, 23)\nEff = c(3, 10, 17, 24)\nInf_ = c(4, 11, 18, 25)\nTF = c(5, 12, 19, 26)\nTSS = c(6, 13, 20, 27)\nWAS = c(7, 14, 21, 28)\n\n#Individual Species Analysis\nad_df = df %>% filter(Group %in% AD)\nas_df = df %>% filter(Group %in% AS)\neff_df = df %>% filter(Group %in% Eff)\ninf_df = df %>% filter(Group %in% Inf_)\ntf_df = df %>% filter(Group %in% TF)\ntss_df = df %>% filter(Group %in% TSS)\nwas_df = df %>% filter(Group %in% WAS)\n```\n:::\n\n\n\n\n### Anaerobic Digester\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#AD\ngroupings = ad_df$Group\nindval_ad <- multipatt(ad_df[,c(2:ncol(ad_df))], groupings, \n                       control = how(nperm=999),duleg = FALSE) \n\n#change index column values if index=1 then change to AD-Fall etc\nad_sig.otus <- indval_ad$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                           index == 2 ~ \"Spring\",\n                                                           index == 3 ~ \"Summer\",\n                                                           index == 4 ~ \"Winter\",\n                                                           index == 5 ~ \"Fall-Spring\",\n                                                           index == 6 ~ \"Fall-Summer\",\n                                                           index == 7 ~ \"Fall-Winter\",\n                                                           index == 8 ~ \"Spring-Summer\",\n                                                           index == 9 ~ \"Spring-Winter\",\n                                                           index == 10 ~ \"Summer-Winter\",\n                                                           index == 11 ~ \"Fall-Spring-Summer\",\n                                                           index == 12 ~ \"Fall-Spring-Winter\",\n                                                           index == 13 ~ \"Fall-Summer-Winter\",\n                                                           index == 14 ~ \"Spring-Summer-Winter\",\n                                                           index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\nad_sig.otus <- ad_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))%>%\n  rename(OTU = Value)\n\ngrouped_list_ad <- ad_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\n# Define the sizes of each set and their intersections\nset_sizes <- c(\n  Fall = ad_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = ad_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = ad_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = ad_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = ad_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = ad_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = ad_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = ad_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = ad_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = ad_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer\" = ad_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring&Winter\" = ad_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer&Winter\" = ad_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = ad_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = ad_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Function to filter out small overlaps\nfilter_data <- function(data, threshold = 0.01) {\n  # Calculate the total size\n  total <- sum(data)\n  # Filter out entries that are below the threshold percentage of the total size\n  filtered_data <- data[data / total >= threshold]\n  return(filtered_data)\n}\n\n# Filter the data\nfiltered_data <- filter_data(set_sizes)\n\n# Create the Euler diagram\nfit <- euler(filtered_data)\n\n# Plot the Euler diagram\n# Plot the Euler diagram\nplot(fit, labels = list(font = 3, col = \"blue\", cex = 1.25),\n     quantities = list(type = \"counts\", font = 1, col = \"black\", cex = 0.75), main = \"Seasonal Comparison of Indicator Species in AD system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n#### AD Seasonal Indicator Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_df_ad <- merge(ad_sig.otus, taxa[, c(\"OTU\", \"genus\")], by = \"OTU\")\n\ngrouped_list_ad <- ad_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\nfall_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Fall\"][[1]])\nspring_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Spring\"][[1]])\nsummer_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Summer\"][[1]])\nwinter_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Winter\"][[1]])\nfall_spring_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Spring\"][[1]])\nfall_summer_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Summer\"][[1]])\nfall_winter_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Winter\"][[1]])\nspring_summer_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Spring-Summer\"][[1]])\nspring_winter_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Spring-Winter\"][[1]])\nfall_spring_summer_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Spring-Summer\"][[1]])\nfall_spring_winter_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Spring-Winter\"][[1]])\nfall_summer_winter_ad <- unique(grouped_list_ad$Values[grouped_list_ad$index == \"Fall-Summer-Winter\"][[1]])\n```\n:::\n\n\n\n### Activated Sludge \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#AS\ngroupings = as_df$Group\nindval_as <- multipatt(as_df[,c(2:ncol(as_df))], groupings, \n                       control = how(nperm=999),duleg = FALSE) \n\n#change index column values if index=1 then change to AD-Fall etc\nas_sig.otus <- indval_as$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                           index == 2 ~ \"Spring\",\n                                                           index == 3 ~ \"Summer\",\n                                                           index == 4 ~ \"Winter\",\n                                                           index == 5 ~ \"Fall-Spring\",\n                                                           index == 6 ~ \"Fall-Summer\",\n                                                           index == 7 ~ \"Fall-Winter\",\n                                                           index == 8 ~ \"Spring-Summer\",\n                                                           index == 9 ~ \"Spring-Winter\",\n                                                           index == 10 ~ \"Summer-Winter\",\n                                                           index == 11 ~ \"Fall-Spring-Summer\",\n                                                           index == 12 ~ \"Fall-Spring-Winter\",\n                                                           index == 13 ~ \"Fall-Summer-Winter\",\n                                                           index == 14 ~ \"Spring-Summer-Winter\",\n                                                           index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\nas_sig.otus <- as_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))%>%\n  rename(OTU = Value)\n\ngrouped_list_as <- as_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\n# Define the sizes of each set and their intersections\nset_sizes_as <- c(\n  Fall = as_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = as_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = as_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = as_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = as_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = as_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = as_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = as_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = as_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = as_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer\" = as_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring&Winter\" = as_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer&Winter\" = as_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = as_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = as_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_as <- filter_data(set_sizes_as)\n\n# Create the Euler diagram\nfit_as <- euler(filtered_data_as)\n\n# Plot the Euler diagram\nplot(fit_as, labels = list(font = 3, col = \"blue\", cex = 1.25),\n     quantities = list(type = \"counts\", font = 1, col = \"black\", cex = 0.75), \n     main = \"Seasonal Comparison of Indicator Species in AS system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n#### AS Seasonal Indicator Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_df_as <- merge(as_sig.otus, taxa[, c(\"OTU\", \"genus\")], by = \"OTU\")\n\ngrouped_list_as <- as_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\nfall_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Fall\"][[1]])\nspring_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Spring\"][[1]])\nsummer_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Summer\"][[1]])\nwinter_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Winter\"][[1]])\nfall_spring_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Fall-Spring\"][[1]])\nfall_summer_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Fall-Summer\"][[1]])\nfall_winter_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Fall-Winter\"][[1]])\nspring_summer_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Spring-Summer\"][[1]])\nspring_winter_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Spring-Winter\"][[1]])\nfall_spring_summer_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Fall-Spring-Summer\"][[1]])\nfall_spring_winter_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Fall-Spring-Winter\"][[1]])\nfall_summer_winter_as <- unique(grouped_list_as$Values[grouped_list_as$index == \"Fall-Summer-Winter\"][[1]])\n```\n:::\n\n\n\n\n### Effluent\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Eff\ngroupings = eff_df$Group\nindval_eff <- multipatt(eff_df[,c(2:ncol(eff_df))], groupings, \n                        control = how(nperm=999),duleg = FALSE)\n\n#change index column values if index=1 then change to AD-Fall etc\neff_sig.otus <- indval_eff$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                             index == 2 ~ \"Spring\",\n                                                             index == 3 ~ \"Summer\",\n                                                             index == 4 ~ \"Winter\",\n                                                             index == 5 ~ \"Fall-Spring\",\n                                                             index == 6 ~ \"Fall-Summer\",\n                                                             index == 7 ~ \"Fall-Winter\",\n                                                             index == 8 ~ \"Spring-Summer\",\n                                                             index == 9 ~ \"Spring-Winter\",\n                                                             index == 10 ~ \"Summer-Winter\",\n                                                             index == 11 ~ \"Fall-Spring-Summer\",\n                                                             index == 12 ~ \"Fall-Spring-Winter\",\n                                                             index == 13 ~ \"Fall-Summer-Winter\",\n                                                             index == 14 ~ \"Spring-Summer-Winter\",\n                                                             index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\neff_sig.otus <- eff_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))%>%\n  rename(OTU = Value)\n\n#create a new dataframe for each unique index value\n\ngrouped_list_eff <- eff_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\n# Define the sizes of each set and their intersections\nset_sizes_eff <- c(\n  Fall = eff_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = eff_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = eff_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = eff_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = eff_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = eff_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = eff_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = eff_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = eff_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = eff_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer\" = eff_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring&Winter\" = eff_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer&Winter\" = eff_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = eff_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = eff_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_eff <- filter_data(set_sizes_eff)\n\n# Create the Euler diagram\nfit_eff <- euler(filtered_data_eff)\n\n# Plot the Euler diagram\nplot(fit_eff,labels = list(font = 3, col = \"blue\", cex = 1.25),\n     quantities = list(type = \"counts\", font = 1, col = \"black\", cex = 0.75), main = \"Seasonal Comparison of Indicator Species in Eff system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Eff Seasonal Indicator Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_df_eff <- merge(ad_sig.otus, taxa[, c(\"OTU\", \"genus\")], by = \"OTU\")\n\ngrouped_list_eff <- eff_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\nfall_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Fall\"][[1]])\nspring_eff <-unique(grouped_list_eff$Values[grouped_list_eff$index == \"Spring\"][[1]])\nsummer_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Summer\"][[1]])\nwinter_eff <-unique(grouped_list_eff$Values[grouped_list_eff$index == \"Winter\"][[1]])\nfall_spring_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Spring\"][[1]])\nfall_summer_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Summer\"][[1]])\nfall_winter_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Winter\"][[1]])\nspring_summer_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Spring-Summer\"][[1]])\nspring_winter_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Spring-Winter\"][[1]])\nsummer_winter_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Summer-Winter\"][[1]])\nfall_spring_summer_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Spring-Summer\"][[1]])\nfall_spring_winter_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Spring-Winter\"][[1]])\nfall_summer_winter_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Fall-Summer-Winter\"][[1]])\nspring_summer_winter_eff <- unique(grouped_list_eff$Values[grouped_list_eff$index == \"Spring-Summer-Winter\"][[1]])\n```\n:::\n\n\n\n\n### Influent\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Inf\ngroupings = inf_df$Group\nindval_inf <- multipatt(inf_df[,c(2:ncol(inf_df))], groupings, \n                        control = how(nperm=999),duleg = FALSE)\n\n#change index column values if index=1 then change to AD-Fall etc\ninf_sig.otus <- indval_inf$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                             index == 2 ~ \"Spring\",\n                                                             index == 3 ~ \"Summer\",\n                                                             index == 4 ~ \"Winter\",\n                                                             index == 5 ~ \"Fall-Spring\",\n                                                             index == 6 ~ \"Fall-Summer\",\n                                                             index == 7 ~ \"Fall-Winter\",\n                                                             index == 8 ~ \"Spring-Summer\",\n                                                             index == 9 ~ \"Spring-Winter\",\n                                                             index == 10 ~ \"Summer-Winter\",\n                                                             index == 11 ~ \"Fall-Spring-Summer\",\n                                                             index == 12 ~ \"Fall-Spring-Winter\",\n                                                             index == 13 ~ \"Fall-Summer-Winter\",\n                                                             index == 14 ~ \"Spring-Summer-Winter\",\n                                                             index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\ninf_sig.otus <- inf_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))%>%\n  rename(OTU = Value)\n\n#create a new dataframe for each unique index value\n\ngrouped_list_inf <- inf_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\n# Define the sizes of each set and their intersections\nset_sizes_inf <- c(\n  Fall = inf_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = inf_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = inf_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = inf_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = inf_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = inf_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = inf_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = inf_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = inf_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = inf_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer\" = inf_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring&Winter\" = inf_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer&Winter\" = inf_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = inf_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = inf_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_inf <- filter_data(set_sizes_inf)\n\n# Create the Euler diagram\nfit_inf <- euler(filtered_data_inf)\n\n# Plot the Euler diagram\nplot(fit_inf, labels = list(font = 3, col = \"blue\", cex = 1.25),\n     quantities = list(type = \"counts\", font = 1, col = \"black\", cex = 0.75), main = \"Seasonal Comparison of Indicator Species in Inf system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Inf Seasonal Indicator Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_df_inf <- merge(inf_sig.otus, taxa[, c(\"OTU\", \"genus\")], by = \"OTU\")\n\ngrouped_list_inf <- inf_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\nfall_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Fall\"][[1]])\nspring_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Spring\"][[1]])\nsummer_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Summer\"][[1]])\nwinter_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Winter\"][[1]])\nfall_spring_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Spring\"][[1]])\nfall_summer_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Summer\"][[1]])\nfall_winter_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Winter\"][[1]])\nspring_summer_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Spring-Summer\"][[1]])\nspring_winter_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Spring-Winter\"][[1]])\nsummer_winter_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Summer-Winter\"][[1]])\nfall_spring_summer_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Spring-Summer\"][[1]])\nfall_spring_winter_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Spring-Winter\"][[1]])\nfall_summer_winter_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Fall-Summer-Winter\"][[1]])\nspring_summer_winter_inf <- unique(grouped_list_inf$Values[grouped_list_inf$index == \"Spring-Summer-Winter\"][[1]])\n```\n:::\n\n\n\n\n\n### Trickling Filter\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#TF\ngroupings = tf_df$Group\nindval_tf <- multipatt(tf_df[,c(2:ncol(tf_df))], groupings, \n                       control = how(nperm=999),duleg = FALSE)\n\n#change index column values if index=1 then change to AD-Fall etc\ntf_sig.otus <- indval_tf$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                           index == 2 ~ \"Spring\",\n                                                           index == 3 ~ \"Summer\",\n                                                           index == 4 ~ \"Winter\",\n                                                           index == 5 ~ \"Fall-Spring\",\n                                                           index == 6 ~ \"Fall-Summer\",\n                                                           index == 7 ~ \"Fall-Winter\",\n                                                           index == 8 ~ \"Spring-Summer\",\n                                                           index == 9 ~ \"Spring-Winter\",\n                                                           index == 10 ~ \"Summer-Winter\",\n                                                           index == 11 ~ \"Fall-Spring-Summer\",\n                                                           index == 12 ~ \"Fall-Spring-Winter\",\n                                                           index == 13 ~ \"Fall-Summer-Winter\",\n                                                           index == 14 ~ \"Spring-Summer-Winter\",\n                                                           index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\ntf_sig.otus <- tf_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))%>%\n  rename(OTU = Value)\n\ngrouped_list_tf <- tf_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\n# Define the sizes of each set and their intersections\nset_sizes_tf <- c(\n  Fall = tf_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = tf_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = tf_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = tf_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = tf_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = tf_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = tf_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = tf_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = tf_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = tf_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer\" = tf_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring&Winter\" = tf_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer&Winter\" = tf_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = tf_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = tf_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_tf <- filter_data(set_sizes_tf)\n\n# Create the Euler diagram\nfit_tf <- euler(filtered_data_tf)\n\n# Plot the Euler diagram\nplot(fit_tf, labels = list(font = 3, col = \"blue\", cex = 1.25),\n     quantities = list(type = \"counts\", font = 1, col = \"black\", cex = 0.75), main = \"Seasonal Comparison of Indicator Species in TF system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Trickling Seasonal Indicator Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_df_tf <- merge(tf_sig.otus, taxa[, c(\"OTU\", \"genus\")], by = \"OTU\")\n\ngrouped_list_tf <- tf_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\nfall_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Fall\"][[1]])\nspring_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Spring\"][[1]])\nsummer_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Summer\"][[1]])\nwinter_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Winter\"][[1]])\nfall_spring_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Spring\"][[1]])\nfall_summer_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Summer\"][[1]])\nfall_winter_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Winter\"][[1]])\nspring_summer_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Spring-Summer\"][[1]])\nspring_winter_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Spring-Winter\"][[1]])\nsummer_winter_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Summer-Winter\"][[1]])\nfall_spring_summer_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Spring-Summer\"][[1]])\nfall_spring_winter_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Spring-Winter\"][[1]])\nfall_summer_winter_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Fall-Summer-Winter\"][[1]])\nspring_summer_winter_tf <- unique(grouped_list_tf$Values[grouped_list_tf$index == \"Spring-Summer-Winter\"][[1]])\n```\n:::\n\n\n\n\n### TSS\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#TSS\ngroupings = tss_df$Group\nindval_tss <- multipatt(tss_df[,c(2:ncol(tss_df))], groupings, \n                        control = how(nperm=999),duleg = FALSE)\n\n#change index column values if index=1 then change to AD-Fall etc\ntss_sig.otus <- indval_tss$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                             index == 2 ~ \"Spring\",\n                                                             index == 3 ~ \"Summer\",\n                                                             index == 4 ~ \"Winter\",\n                                                             index == 5 ~ \"Fall-Spring\",\n                                                             index == 6 ~ \"Fall-Summer\",\n                                                             index == 7 ~ \"Fall-Winter\",\n                                                             index == 8 ~ \"Spring-Summer\",\n                                                             index == 9 ~ \"Spring-Winter\",\n                                                             index == 10 ~ \"Summer-Winter\",\n                                                             index == 11 ~ \"Fall-Spring-Summer\",\n                                                             index == 12 ~ \"Fall-Spring-Winter\",\n                                                             index == 13 ~ \"Fall-Summer-Winter\",\n                                                             index == 14 ~ \"Spring-Summer-Winter\",\n                                                             index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\ntss_sig.otus <- tss_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))%>%\n  rename(OTU = Value)\n\ngrouped_list_tss <- tss_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\n# Define the sizes of each set and their intersections\nset_sizes_tss <- c(\n  Fall = tss_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = tss_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = tss_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = tss_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = tss_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = tss_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = tss_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = tss_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = tss_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = tss_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer\" = tss_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring&Winter\" = tss_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer&Winter\" = tss_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = tss_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = tss_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_tss <- filter_data(set_sizes_tss)\n\n# Create the Euler diagram\nfit_tss <- euler(filtered_data_tss)\n\n# Plot the Euler diagram\nplot(fit_tss,labels = list(font = 3, col = \"blue\", cex = 1.25),\n     quantities = list(type = \"counts\", font = 1, col = \"black\", cex = 0.75), main = \"Seasonal Comparison of Indicator Species in TSS system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n#### TSS Seasonal Indicator Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_df_tss <- merge(tss_sig.otus, taxa[, c(\"OTU\", \"genus\")], by = \"OTU\")\n\ngrouped_list_tss <- tss_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\nfall_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Fall\"][[1]])\nspring_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Spring\"][[1]])\nsummer_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Summer\"][[1]])\nwinter_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Winter\"][[1]])\nfall_spring_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Spring\"][[1]])\nfall_summer_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Summer\"][[1]])\nfall_winter_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Winter\"][[1]])\nspring_summer_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Spring-Summer\"][[1]])\nspring_winter_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Spring-Winter\"][[1]])\nsummer_winter_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Summer-Winter\"][[1]])\nfall_spring_summer_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Spring-Summer\"][[1]])\nfall_spring_winter_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Spring-Winter\"][[1]])\nfall_summer_winter_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Fall-Summer-Winter\"][[1]])\nspring_summer_winter_tss <- unique(grouped_list_tss$Values[grouped_list_tss$index == \"Spring-Summer-Winter\"][[1]])\n```\n:::\n\n\n\n\n### WAS\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#WAS\ngroupings = was_df$Group\nindval_was <- multipatt(was_df[,c(2:ncol(was_df))], groupings, \n                        control = how(nperm=999),duleg = FALSE)\n\n#change index column values if index=1 then change to AD-Fall etc\nwas_sig.otus <- indval_was$sign %>% mutate(index = case_when(index == 1 ~ \"Fall\",\n                                                             index == 2 ~ \"Spring\",\n                                                             index == 3 ~ \"Summer\",\n                                                             index == 4 ~ \"Winter\",\n                                                             index == 5 ~ \"Fall-Spring\",\n                                                             index == 6 ~ \"Fall-Summer\",\n                                                             index == 7 ~ \"Fall-Winter\",\n                                                             index == 8 ~ \"Spring-Summer\",\n                                                             index == 9 ~ \"Spring-Winter\",\n                                                             index == 10 ~ \"Summer-Winter\",\n                                                             index == 11 ~ \"Fall-Spring-Summer\",\n                                                             index == 12 ~ \"Fall-Spring-Winter\",\n                                                             index == 13 ~ \"Fall-Summer-Winter\",\n                                                             index == 14 ~ \"Spring-Summer-Winter\",\n                                                             index == 15 ~ \"Fall-Spring-Summer-Winter\"\n))\n\nwas_sig.otus <- was_sig.otus %>% mutate(otu = rownames(.)) %>% \n  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% \n  select(index, stat, p.value, otu) %>% \n  mutate(Value = paste0(\"Zotu\",otu))%>%\n  rename(OTU = Value)\n\n#create a new dataframe for each unique index value\ngrouped_list_was <- was_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\n# Define the sizes of each set and their intersections\nset_sizes_was <- c(\n  Fall = was_sig.otus %>% filter(index == \"Fall\") %>% nrow(),\n  Spring = was_sig.otus %>% filter(index == \"Spring\") %>% nrow(),\n  Summer = was_sig.otus %>% filter(index == \"Summer\") %>% nrow(),\n  Winter = was_sig.otus %>% filter(index == \"Winter\") %>% nrow(),    \n  \"Fall&Spring\" = was_sig.otus %>% filter(index == \"Fall-Spring\") %>% nrow(),\n  \"Fall&Summer\" = was_sig.otus %>% filter(index == \"Fall-Summer\") %>% nrow(),\n  \"Fall&Winter\" = was_sig.otus %>% filter(index == \"Fall-Winter\") %>% nrow(),\n  \"Spring&Summer\" = was_sig.otus %>% filter(index == \"Spring-Summer\") %>% nrow(),\n  \"Spring&Winter\" = was_sig.otus %>% filter(index == \"Spring-Winter\") %>% nrow(),\n  \"Summer&Winter\" = was_sig.otus %>% filter(index == \"Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer\" = was_sig.otus %>% filter(index == \"Fall-Spring-Summer\") %>% nrow(),\n  \"Fall&Spring&Winter\" = was_sig.otus %>% filter(index == \"Fall-Spring-Winter\") %>% nrow(),\n  \"Fall&Summer&Winter\" = was_sig.otus %>% filter(index == \"Fall-Summer-Winter\") %>% nrow(),\n  \"Spring&Summer&Winter\" = was_sig.otus %>% filter(index == \"Spring-Summer-Winter\") %>% nrow(),\n  \"Fall&Spring&Summer&Winter\" = was_sig.otus %>% filter(index == \"Fall-Spring-Summer-Winter\") %>% nrow()\n)\n\n# Filter the data\nfiltered_data_was <- filter_data(set_sizes_was)\n\n# Create the Euler diagram\nfit_was <- euler(filtered_data_was)\n\n# Plot the Euler diagram\nplot(fit_was, labels = list(font = 3, col = \"blue\", cex = 1.25),\n     quantities = list(type = \"counts\", font = 1, col = \"black\", cex = 0.75), main = \"Seasonal Comparison of Indicator Species in WAS system\")\n```\n\n::: {.cell-output-display}\n![](indicator_species_plots_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n#### WAS Seasonal Indicator Species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_df_was <- merge(was_sig.otus, taxa[, c(\"OTU\", \"genus\")], by = \"OTU\")\n\ngrouped_list_was <- was_sig.otus %>%\n  group_by(index) %>%\n  summarize(Values = list(OTU))\n\nfall_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Fall\"][[1]])\nspring_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Spring\"][[1]])\nsummer_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Summer\"][[1]])\nwinter_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Winter\"][[1]])\nfall_spring_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Fall-Spring\"][[1]])\nfall_summer_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Fall-Summer\"][[1]])\nfall_winter_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Fall-Winter\"][[1]])\nspring_summer_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Spring-Summer\"][[1]])\nspring_winter_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Spring-Winter\"][[1]])\nsummer_winter_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Summer-Winter\"][[1]])\nfall_spring_summer_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Fall-Spring-Summer\"][[1]])\nfall_spring_winter_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Fall-Spring-Winter\"][[1]])\nfall_summer_winter_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Fall-Summer-Winter\"][[1]])\nspring_summer_winter_was <- unique(grouped_list_was$Values[grouped_list_was$index == \"Spring-Summer-Winter\"][[1]])\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}