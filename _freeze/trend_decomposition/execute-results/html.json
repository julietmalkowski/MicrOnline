{
  "hash": "f2f500de824bb9acb7b6c677fb28695c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Decomposition of Trends\n---\n\n\n\n# What dependencies to install\n\n\n::: {#2ef0ce67 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nfrom scipy import interpolate\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom random import gauss\nfrom pandas.plotting import autocorrelation_plot\nimport statsmodels.formula.api as smf\nimport statsmodels.api as sm\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.ar_model import AR\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n```\n:::\n\n\n# Loading data\n\n::: {#9e20e77a .cell execution_count=2}\n``` {.python .cell-code}\nabundance_table = pd.read_excel('/Users/julietmalkowski/Desktop/Research/Kinetic_Model/abundance_table.xlsx')\nas_outliers_removed = pd.read_excel(\"/Users/julietmalkowski/Desktop/Research/Kinetic_Model/as_outliers_removed_june16.xlsx\")\n```\n:::\n\n\n# Creating Dataframes\n\n::: {#a49eeafd .cell execution_count=3}\n``` {.python .cell-code}\n#remove first 4 characters in every column name\nabundance_table.columns = abundance_table.columns.str[4:] \n#split string in column to get date and process\nabundance_table[['Process','Date']] = abundance_table['le'].str.split('_',expand=True)\nabundance_table = abundance_table.drop(columns=['le'])\n#keep only AS-1 and AS-2 data\nprocesses = ['AS-1', 'AS-2']\nas_abundance_table = abundance_table[abundance_table['Process'].isin(processes)]\nas_abundance_table = as_abundance_table.drop(columns=['Process'])\n#group by date and find the mean of all values\nas_abundance_table = as_abundance_table.groupby(['Date']).mean()\nas_abundance_table['sum'] = as_abundance_table.sum(axis=1)\nas_abundance_table = as_abundance_table.reset_index()\nas_abundance = as_abundance_table.set_index('Date')\n#find percentage each column by dividing by sum\nas_abundance = as_abundance.div(as_abundance['sum'], axis=0)\nas_abundance = as_abundance.drop(columns=['sum'])\n#pivot dataframe from wide to long format\nas_abundance = as_abundance.reset_index()\nas_abundance = as_abundance.melt(id_vars=['Date'], var_name='OTU', value_name='Abundance')\n#remove all rows with an abundance less than 0.01\n#as_abundance_low_filter = as_abundance[as_abundance['Abundance'] >= 0.0005] \nas_abundance = as_abundance[as_abundance['Abundance'] >= 0.01] \n\ndef shannon_index(x):\n    return -1 * np.sum(x*np.log(x))\n\nShannon_Diversity = as_abundance.groupby('Date')['Abundance'].agg(shannon_index).reset_index()\n\nas_abundance = as_abundance.merge(Shannon_Diversity, on='Date')\nas_abundance = as_abundance.rename(columns={'Abundance_x':'Abundance', 'Abundance_y':'Shannon Index'})\n\nas_abundance_table_moved = as_abundance_table.melt(id_vars=['Date'], var_name='OTU', value_name='Counts')\n\n#merging with as_abundance\nunfiltered_data = as_abundance.merge(as_abundance_table_moved, on=['Date','OTU'])\n\nunfiltered_data['Date'] = pd.to_datetime(unfiltered_data['Date'])\nunfiltered_data = unfiltered_data.set_index('Date')\nunfiltered_data = unfiltered_data.sort_values(by='Date')\n```\n:::\n\n\n## Seasonal Decomposition\n\n::: {#18dedc4f .cell execution_count=4}\n``` {.python .cell-code}\nunfiltered_data = unfiltered_data\ndecomposition = sm.tsa.seasonal_decompose(unfiltered_data['Shannon Index'], period = 4) \nfigure = decomposition.plot()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](trend_decomposition_files/figure-html/cell-5-output-1.png){width=655 height=459}\n:::\n:::\n\n\n## Shannon Index over time\n\n::: {#0b3c69ef .cell execution_count=5}\n``` {.python .cell-code}\n#plot Shannon Index over time with angle = 90 on x-axis labels\nplt.xticks(rotation=90, size = 5)\nsns.lineplot(x='Date', y='Shannon Index', data=unfiltered_data)\nplt.title('Shannon Index Over Time')\n#add x-axis label\nplt.xlabel('Date')\nplt.xticks(size = 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n(array([19174., 19236., 19297., 19358., 19417., 19478.]),\n [Text(19174.0, 0, '2022-07'),\n  Text(19236.0, 0, '2022-09'),\n  Text(19297.0, 0, '2022-11'),\n  Text(19358.0, 0, '2023-01'),\n  Text(19417.0, 0, '2023-03'),\n  Text(19478.0, 0, '2023-05')])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](trend_decomposition_files/figure-html/cell-6-output-2.png){width=665 height=524}\n:::\n:::\n\n\n",
    "supporting": [
      "trend_decomposition_files"
    ],
    "filters": [],
    "includes": {}
  }
}