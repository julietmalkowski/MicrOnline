## Correlations

### Loading Dependencies
```{python}
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import scipy.stats
```

## Loading Data
```{python}
abundance_table = pd.read_excel("abundance_table.xlsx")
#remove first 4 characters in every column name
abundance_table.columns = abundance_table.columns.str[4:] 
#split string in column to get date and process
abundance_table[['Process','Date']] = abundance_table['le'].str.split('_',expand=True)
abundance_table = abundance_table.drop(columns=['le'])
processes = ['AS-1', 'AS-2']
as_abundance_table = abundance_table[abundance_table['Process'].isin(processes)]
as_abundance_table = as_abundance_table.drop(columns=['Process'])
#group by date and find the mean of all values
as_abundance_table = as_abundance_table.groupby(['Date']).mean()
#remove last two rows of as_abundance_table
a = as_abundance_table.iloc[:,:-2]
a = a.reset_index()
#remove first column in a
a = a.iloc[:,1:]
a = a.to_numpy()
```

## Correlation between count data
```{python}
correlation = np.corrcoef(a.T)

mask = ((correlation > 0.75) & (correlation < 0.99)) | (correlation < -0.75) & (correlation > -0.99)

# Plotting
fig = plt.figure()
# Put in title and axis labels
fig.suptitle('Correlation Matrix of OTU Counts Over Time')
ax = fig.add_subplot(111)

# Use the mask to display the significant correlations
masked_correlation = np.ma.masked_where(~mask, correlation)
cax = ax.matshow(masked_correlation, cmap='coolwarm', vmin=-1, vmax=1)
fig.colorbar(cax)

plt.show()
```