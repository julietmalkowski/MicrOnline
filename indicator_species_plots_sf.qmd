---
title: Indicator Species Analysis
format: html
echo: false
---

```{ojs}
//| panel: input
viewof processjs = Inputs.radio(
  new Map([
    ["Anaerobic Digester Influent", "AD"], 
    ["Activated Sludge", "AS"], 
    ["Effluent", "Eff"], 
    ["Influent", "Inf"], 
    ["Trickling Filter", "TF"], 
    ["Anaerobic Digester Effluent", "TSS"], 
    ["Waste Activated Sludge", "WAS"]
  ]),
  {value: "AD", label: "Select a Sampling Location:"}
)
```

```{r dependencies and functions - not run}
#| output: FALSE
library(indicspecies)
library(readxl)
#library(ape)
library(tidyverse)
#library(fmsb)
library(eulerr)
library(DT)

# Function to filter out small overlaps
filter_data <- function(data, threshold = 0.01) {
  # Calculate the total size
  total <- sum(data)
  # Filter out entries that are below the threshold percentage of the total size
  filtered_data <- data[data / total >= threshold]
  return(filtered_data)
}
```

```{r read data for analysis - not run}
#| eval: false
#| echo: false

# connect indicspecies output to process
p_id <- tibble("Process" = c("AD", "AS", "Eff", "Inf", "TF", "TSS", "WAS"),
               "process_index" = seq(1,7,1))

# connect indicspecies output to season overlap
s_id <- tibble("seasoncooccurrence" = c("Fall","Spring","Summer","Winter","Fall-Spring","Fall-Summer","Fall-Winter","Spring-Summer","Spring-Winter","Summer-Winter","Fall-Spring-Summer","Fall-Spring-Winter","Fall-Summer-Winter","Spring-Summer-Winter","Fall-Spring-Summer-Winter"),
               "season_cooccurence_index" = seq(1,15,1))

# read taxonomy data
taxa <- read_excel("./tax.xlsx")

# read and format abundance data
abundance_table <- read_excel("~/Documents/annacis_quarto/abundance_table.xlsx") %>% 
  dplyr::rename_with(~ substr(., 5, length(.))) %>% 
  separate(le, into = c("Process", "Date"), sep = "_") %>% 
  separate(Date, into = c("Month", "Day", "Year"), sep = "/") %>% 
  mutate(Month = as.numeric(Month)) %>% 
  mutate(Process = case_when(Process %in% c("AS-1", "AS-2") ~ "AS", T ~ Process)) %>% 
  left_join(p_id) %>%
  mutate(Season = case_match(Month,
                             c(12,1,2) ~ "Winter",
                             c(3,4,5) ~ "Spring",
                             c(6,7,8) ~ "Summer",
                             c(9,10,11) ~ "Fall")) %>% 
  group_by(Season, Process) %>%
  mutate(season_process_index = cur_group_id()) %>%
  ungroup() %>% 
  select(Month, Day, Year, Process, process_index, Season, season_process_index, everything())
```

```{r indicatorspecies by process - not run}
#| eval: false
#| echo: false
groupings <- abundance_table$process_index

#duleg = TRUE which means that site group combinations will not be considered
indval <- multipatt(abundance_table[,c(8:ncol(abundance_table))], groupings, 
                    control = how(nperm = 999), duleg = TRUE) 

sig.otus <- indval$sign %>%
  rename("process_index" = index) %>% 
  left_join(p_id) %>% 
  mutate(otu = rownames(.)) %>% 
  filter(p.value < 0.05) %>% filter(stat > 0.5) %>% # filter only significant results
  select(Process, process_index, stat, p.value, otu) %>% 
  mutate(OTU = paste0("Zotu", otu), .keep = "unused") %>% 
  left_join(taxa %>% select(OTU, "Genus" = genus)) # Attaching taxonomic informaiton to indicator species

sig.genus <- sig.otus %>% 
  group_by(Process, Genus) %>% # group by Genus
  summarise("# of OTUs" = n()) %>% 
  ungroup()

write.csv(sig.genus, "indicator_data/indicator_genus_process.csv", row.names = F) # save output for plotting
```

```{r indicatorspecies by season for each process - not run}
#| eval: false
#| echo: false

# make empty data frames to fill with for loop
sig.otus.all <- data.frame()
all.sets.all <- data.frame()

for (process in p_id$Process) { # loop through processes running season overlap analysis for each

  df.p <- abundance_table %>% filter(Process == process)
  
  groupings.p <-  df.p$season_process_index
  
  #duleg = FALSE which means that site group combinations will be considered
  indval.p <- multipatt(df.p[,c(8:ncol(df.p))], groupings.p, 
                         control = how(nperm=999), duleg = FALSE) 
  
  rm(df.p) # remove to save RAM
  
  sig.otus.p <- indval.p$sign %>% 
    rename("season_cooccurence_index" = index) %>% 
    left_join(s_id)%>%
    mutate(otu = rownames(.)) %>% 
    filter(p.value < 0.05) %>% filter(stat > 0.5) %>% # filter only significant results
    select(seasoncooccurrence, season_cooccurence_index, stat, p.value, otu) %>% 
    mutate(OTU = paste0("Zotu", otu), .keep = "unused") %>% 
    left_join(taxa %>% select(OTU, "Genus" = genus)) %>% 
    mutate(Process = process)
  
  sig.otus.all <- sig.otus.all %>% # bind results to full list
    bind_rows(sig.otus.p) 
  
  # Define the sizes of each set and their intersections
  all.sets.p <- c()
  n = 1
  for (season in s_id$seasoncooccurrence) {
    all.sets.p[n] <- sig.otus.p %>% filter(seasoncooccurrence == season) %>% nrow()
    names(all.sets.p)[n] <- season
    n = n + 1
  }
  
  # reformat for euler
  names(all.sets.p) <- gsub("-", "&", names(all.sets.p))
  
  # Filter the data to remove small overlaps and improve euler plot
  filtered.sets.p <- filter_data(all.sets.p)
  
  all.sets.all <- all.sets.all %>% # bind results to full list
    bind_rows(data.frame("Process" = process, 
                         "Set" = I(list(all.sets.p)),
                         "Filter Set" = I(list(filtered.sets.p))))
} # end for loop

# save outputs for plotting
write.csv(sig.otus.all %>% select(Genus, OTU, p.value, seasoncooccurrence, Process), "indicator_data/indicator_otu_season.csv", row.names = F)

saveRDS(all.sets.all, "indicator_data/euler_sets.rds")
```

```{r generate euler plots}
#| eval: false
#| echo: false
euler.all <- readRDS("indicator_data/euler_sets.rds")

n <- 1
for (process in c("AD", "AS", "Eff", "Inf", "TF", "TSS", "WAS")) {
  euler.r <- euler.all %>% dplyr::filter(Process == process)
  euler.r <- euler.r[[1,3]]
  names(euler.r) <- gsub("-", "&", names(euler.r)) # can remove if fix is implemented upon creation
  euler.obj <- euler(euler.r) # read Filtered Sets, use [[1,2]] for full Sets
  svg(paste0("indicator_data/", process, "_euler.svg"))
  print(plot(euler.obj, labels = list(font = 3, col = "blue", cex = 1.25),
     quantities = list(type = "counts", font = 1, col = "black", cex = 0.75)))
  dev.off()
}
```


```{ojs prepare js data objects}
genus = FileAttachment("indicator_data/indicator_genus_process.csv").csv({typed: true})

genusProcess = genus.filter(function(table) {
  return processjs == table.Process
})

otu = FileAttachment("indicator_data/indicator_otu_season.csv").csv({typed: true})

otuProcess = otu.filter(function(table) {
  return processjs == table.Process
})

otuProcessSeason = otuProcess.filter(function(table) {
  return collocationsCat.includes(table.seasoncooccurrence)
})

otuProcessSeason2 = otuProcess.filter(function(table) {
  return collocationsCat == table.seasoncooccurrence
})
```

```{r section heading 1}
#| eval: false
#| echo: false
cat(paste("#### All Significant Indicator Genera in", processr))
```

#### All Significant Indicator Genera in ${processjs}
```{ojs genera table}
Inputs.table(genusProcess)
```

#### Co-occurence of Indicator OTUs by Season in ${processjs}
```{ojs euler plot js}
urlad = FileAttachment('indicator_data/AD_euler.svg')
urlas = FileAttachment('indicator_data/AS_euler.svg')
urleff = FileAttachment('indicator_data/Eff_euler.svg')
urlinf = FileAttachment('indicator_data/Inf_euler.svg')
urltf = FileAttachment('indicator_data/TF_euler.svg')
urltss = FileAttachment('indicator_data/TSS_euler.svg')
urlwas = FileAttachment('indicator_data/WAS_euler.svg')

{
  if (processjs == "AD") {
    return urlad.image()
  } else if (processjs == "AS") {
    return urlas.image()
  } else if (processjs == "Eff") {
    return urleff.image()
  } else if (processjs == "Inf") {
    return urlinf.image()
  } else if (processjs == "TF") {
    return urltf.image()
  } else if (processjs == "TSS") {
    return urltss.image()
  } else if (processjs == "WAS") {
    return urlwas.image()
  }
}

```


```{ojs checkbox selection}
viewof collocations = Inputs.checkbox(["Fall","Spring","Summer","Winter"], {label: "Select seasons to view OTUs:"})
collocationsCat = collocations.join("-")
```

::: {.panel-tabset}

## Exclusive list
```{ojs table with only overlap}
Inputs.table(otuProcessSeason2, {
  header: {
    pvalue: "P value",
    seasoncooccurrence: "Season Overlap"
  }
})
```

## Inclusive list
```{ojs table with all of selected groups}
Inputs.table(otuProcessSeason, {
  header: {
    pvalue: "P value",
    seasoncooccurrence: "Season Overlap"
  }
})
```

:::


